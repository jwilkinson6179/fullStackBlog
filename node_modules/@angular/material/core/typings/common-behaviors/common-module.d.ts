/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
import { InjectionToken } from '@angular/core';
/** Injection token that configures whether the Material sanity checks are enabled. */
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/cdk/bidi';
export declare const MATERIAL_SANITY_CHECKS: InjectionToken<boolean>;
/**
 * Module that captures anything that should be loaded and/or run for *all* Angular Material
 * components. This includes Bidi, etc.
 *
 * This module should be imported to each top-level component module (e.g., MatTabsModule).
 */
export declare class MatCommonModule {
    private _sanityChecksEnabled;
    /** Whether we've done the global sanity checks (e.g. a theme is loaded, there is a doctype). */
    private _hasDoneGlobalChecks;
    /** Whether we've already checked for HammerJs availability. */
    private _hasCheckedHammer;
    /** Reference to the global `document` object. */
    private _document;
    /** Reference to the global 'window' object. */
    private _window;
    constructor(_sanityChecksEnabled: boolean);
    /** Whether any sanity checks are enabled */
    private _areChecksEnabled();
    /** Whether the code is running in tests. */
    private _isTestEnv();
    private _checkDoctypeIsDefined();
    private _checkThemeIsPresent();
    /** Checks whether HammerJS is available. */
    _checkHammerIsAvailable(): void;
    static ɵmod: ɵngcc0.ɵɵNgModuleDefWithMeta<MatCommonModule, never, [typeof ɵngcc1.BidiModule], [typeof ɵngcc1.BidiModule]>;
    static ɵinj: ɵngcc0.ɵɵInjectorDef<MatCommonModule>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tbW9uLW1vZHVsZS5kLnRzIiwic291cmNlcyI6WyJjb21tb24tbW9kdWxlLmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgTExDIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcbiAqL1xuaW1wb3J0IHsgSW5qZWN0aW9uVG9rZW4gfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbi8qKiBJbmplY3Rpb24gdG9rZW4gdGhhdCBjb25maWd1cmVzIHdoZXRoZXIgdGhlIE1hdGVyaWFsIHNhbml0eSBjaGVja3MgYXJlIGVuYWJsZWQuICovXG5leHBvcnQgZGVjbGFyZSBjb25zdCBNQVRFUklBTF9TQU5JVFlfQ0hFQ0tTOiBJbmplY3Rpb25Ub2tlbjxib29sZWFuPjtcbi8qKlxuICogTW9kdWxlIHRoYXQgY2FwdHVyZXMgYW55dGhpbmcgdGhhdCBzaG91bGQgYmUgbG9hZGVkIGFuZC9vciBydW4gZm9yICphbGwqIEFuZ3VsYXIgTWF0ZXJpYWxcbiAqIGNvbXBvbmVudHMuIFRoaXMgaW5jbHVkZXMgQmlkaSwgZXRjLlxuICpcbiAqIFRoaXMgbW9kdWxlIHNob3VsZCBiZSBpbXBvcnRlZCB0byBlYWNoIHRvcC1sZXZlbCBjb21wb25lbnQgbW9kdWxlIChlLmcuLCBNYXRUYWJzTW9kdWxlKS5cbiAqL1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgTWF0Q29tbW9uTW9kdWxlIHtcbiAgICBwcml2YXRlIF9zYW5pdHlDaGVja3NFbmFibGVkO1xuICAgIC8qKiBXaGV0aGVyIHdlJ3ZlIGRvbmUgdGhlIGdsb2JhbCBzYW5pdHkgY2hlY2tzIChlLmcuIGEgdGhlbWUgaXMgbG9hZGVkLCB0aGVyZSBpcyBhIGRvY3R5cGUpLiAqL1xuICAgIHByaXZhdGUgX2hhc0RvbmVHbG9iYWxDaGVja3M7XG4gICAgLyoqIFdoZXRoZXIgd2UndmUgYWxyZWFkeSBjaGVja2VkIGZvciBIYW1tZXJKcyBhdmFpbGFiaWxpdHkuICovXG4gICAgcHJpdmF0ZSBfaGFzQ2hlY2tlZEhhbW1lcjtcbiAgICAvKiogUmVmZXJlbmNlIHRvIHRoZSBnbG9iYWwgYGRvY3VtZW50YCBvYmplY3QuICovXG4gICAgcHJpdmF0ZSBfZG9jdW1lbnQ7XG4gICAgLyoqIFJlZmVyZW5jZSB0byB0aGUgZ2xvYmFsICd3aW5kb3cnIG9iamVjdC4gKi9cbiAgICBwcml2YXRlIF93aW5kb3c7XG4gICAgY29uc3RydWN0b3IoX3Nhbml0eUNoZWNrc0VuYWJsZWQ6IGJvb2xlYW4pO1xuICAgIC8qKiBXaGV0aGVyIGFueSBzYW5pdHkgY2hlY2tzIGFyZSBlbmFibGVkICovXG4gICAgcHJpdmF0ZSBfYXJlQ2hlY2tzRW5hYmxlZCgpO1xuICAgIC8qKiBXaGV0aGVyIHRoZSBjb2RlIGlzIHJ1bm5pbmcgaW4gdGVzdHMuICovXG4gICAgcHJpdmF0ZSBfaXNUZXN0RW52KCk7XG4gICAgcHJpdmF0ZSBfY2hlY2tEb2N0eXBlSXNEZWZpbmVkKCk7XG4gICAgcHJpdmF0ZSBfY2hlY2tUaGVtZUlzUHJlc2VudCgpO1xuICAgIC8qKiBDaGVja3Mgd2hldGhlciBIYW1tZXJKUyBpcyBhdmFpbGFibGUuICovXG4gICAgX2NoZWNrSGFtbWVySXNBdmFpbGFibGUoKTogdm9pZDtcbn1cbiJdfQ==