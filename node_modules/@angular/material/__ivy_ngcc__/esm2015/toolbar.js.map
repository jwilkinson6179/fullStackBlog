{"version":3,"file":"toolbar.js","sources":["../../../src/lib/toolbar/toolbar.ts","../../../src/lib/toolbar/toolbar-module.ts","../../../src/lib/toolbar/public-api.ts","../../../src/lib/toolbar/index.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  isDevMode,\n  QueryList,\n  ViewEncapsulation,\n  Inject,\n} from '@angular/core';\nimport {CanColor, mixinColor} from '@angular/material/core';\nimport {Platform} from '@angular/cdk/platform';\nimport {DOCUMENT} from '@angular/common';\n\n// Boilerplate for applying mixins to MatToolbar.\n/** @docs-private */\nexport class MatToolbarBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatToolbarMixinBase = mixinColor(MatToolbarBase);\n\n@Directive({\n  selector: 'mat-toolbar-row',\n  exportAs: 'matToolbarRow',\n  host: {'class': 'mat-toolbar-row'},\n})\nexport class MatToolbarRow {}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-toolbar',\n  exportAs: 'matToolbar',\n  templateUrl: 'toolbar.html',\n  styleUrls: ['toolbar.css'],\n  inputs: ['color'],\n  host: {\n    'class': 'mat-toolbar',\n    '[class.mat-toolbar-multiple-rows]': 'this._toolbarRows.length',\n    '[class.mat-toolbar-single-row]': '!this._toolbarRows.length'\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatToolbar extends _MatToolbarMixinBase implements CanColor, AfterViewInit {\n  private _document: Document;\n\n  /** Reference to all toolbar row elements that have been projected. */\n  @ContentChildren(MatToolbarRow) _toolbarRows: QueryList<MatToolbarRow>;\n\n  constructor(\n    elementRef: ElementRef,\n    private _platform: Platform,\n    @Inject(DOCUMENT) document?: any) {\n    super(elementRef);\n\n    // TODO: make the document a required param when doing breaking changes.\n    this._document = document;\n  }\n\n  ngAfterViewInit() {\n    if (!isDevMode() || !this._platform.isBrowser) {\n      return;\n    }\n\n    this._checkToolbarMixedModes();\n    this._toolbarRows.changes.subscribe(() => this._checkToolbarMixedModes());\n  }\n\n  /**\n   * Throws an exception when developers are attempting to combine the different toolbar row modes.\n   */\n  private _checkToolbarMixedModes() {\n    if (!this._toolbarRows.length) {\n      return;\n    }\n\n    // Check if there are any other DOM nodes that can display content but aren't inside of\n    // a <mat-toolbar-row> element.\n    const isCombinedUsage = [].slice.call(this._elementRef.nativeElement.childNodes)\n      .filter(node => !(node.classList && node.classList.contains('mat-toolbar-row')))\n      .filter(node => node.nodeType !== (this._document ? this._document.COMMENT_NODE : 8))\n      .some(node => node.textContent.trim());\n\n    if (isCombinedUsage) {\n      throwToolbarMixedModesError();\n    }\n  }\n}\n\n/**\n * Throws an exception when attempting to combine the different toolbar row modes.\n * @docs-private\n */\nexport function throwToolbarMixedModesError() {\n  throw Error('MatToolbar: Attempting to combine different toolbar modes. ' +\n    'Either specify multiple `<mat-toolbar-row>` elements explicitly or just place content ' +\n    'inside of a `<mat-toolbar>` for a single row.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {MatToolbar, MatToolbarRow} from './toolbar';\n\n@NgModule({\n  imports: [MatCommonModule, PlatformModule],\n  exports: [MatToolbar, MatToolbarRow, MatCommonModule],\n  declarations: [MatToolbar, MatToolbarRow],\n})\nexport class MatToolbarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport * from './toolbar-module';\nexport * from './toolbar';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"]}