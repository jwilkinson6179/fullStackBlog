{"version":3,"file":"sidenav.js","sources":["../../../src/lib/sidenav/drawer-animations.ts","../../../src/lib/sidenav/drawer.ts","../../../src/lib/sidenav/sidenav.ts","../../../src/lib/sidenav/sidenav-module.ts","../../../src/lib/sidenav/public-api.ts","../../../src/lib/sidenav/index.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the Material drawers. */\nexport const matDrawerAnimations: {\n  readonly transformDrawer: AnimationTriggerMetadata;\n} = {\n  /** Animation that slides a drawer in and out. */\n  transformDrawer: trigger('transform', [\n    state('open, open-instant', style({\n      transform: 'translate3d(0, 0, 0)',\n      visibility: 'visible',\n    })),\n    state('void', style({\n      visibility: 'hidden',\n    })),\n    transition('void => open-instant', animate('0ms')),\n    transition('void <=> open, open-instant => void',\n        animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {AnimationEvent} from '@angular/animations';\nimport {FocusTrap, FocusTrapFactory, FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewEncapsulation,\n  InjectionToken,\n  ViewChild,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {merge} from 'rxjs/observable/merge';\nimport {filter} from 'rxjs/operators/filter';\nimport {take} from 'rxjs/operators/take';\nimport {startWith} from 'rxjs/operators/startWith';\nimport {takeUntil} from 'rxjs/operators/takeUntil';\nimport {debounceTime} from 'rxjs/operators/debounceTime';\nimport {map} from 'rxjs/operators/map';\nimport {fromEvent} from 'rxjs/observable/fromEvent';\nimport {Subject} from 'rxjs/Subject';\nimport {Observable} from 'rxjs/Observable';\nimport {matDrawerAnimations} from './drawer-animations';\nimport {CdkScrollable} from '@angular/cdk/scrolling';\n\n\n/** Throws an exception when two MatDrawer are matching the same position. */\nexport function throwMatDuplicatedDrawerError(position: string) {\n  throw Error(`A drawer was already declared for 'position=\"${position}\"'`);\n}\n\n\n/**\n * Drawer toggle promise result.\n * @deprecated\n * @deletion-target 6.0.0\n */\nexport class MatDrawerToggleResult {\n  constructor(\n    /** Whether the drawer is opened or closed. */\n    public type: 'open' | 'close',\n    /** Whether the drawer animation is finished. */\n    public animationFinished: boolean) {}\n}\n\n/** Configures whether drawers should use auto sizing by default. */\nexport const MAT_DRAWER_DEFAULT_AUTOSIZE =\n    new InjectionToken<boolean>('MAT_DRAWER_DEFAULT_AUTOSIZE');\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer-content',\n  template: '<ng-content></ng-content>',\n  host: {\n    'class': 'mat-drawer-content',\n    '[style.margin-left.px]': '_margins.left',\n    '[style.margin-right.px]': '_margins.right',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatDrawerContent implements AfterContentInit {\n  /**\n   * Margins to be applied to the content. These are used to push / shrink the drawer content when a\n   * drawer is open. We use margin rather than transform even for push mode because transform breaks\n   * fixed position elements inside of the transformed element.\n   */\n  _margins: {left: number|null, right: number|null} = {left: null, right: null};\n\n  constructor(\n      private _changeDetectorRef: ChangeDetectorRef,\n      @Inject(forwardRef(() => MatDrawerContainer)) private _container: MatDrawerContainer) {\n  }\n\n  ngAfterContentInit() {\n    this._container._contentMargins.subscribe(margins => {\n      this._margins = margins;\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n}\n\n\n/**\n * This component corresponds to a drawer that can be opened on the drawer container.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer',\n  exportAs: 'matDrawer',\n  template: '<ng-content></ng-content>',\n  animations: [matDrawerAnimations.transformDrawer],\n  host: {\n    'class': 'mat-drawer',\n    '[@transform]': '_animationState',\n    '(@transform.start)': '_onAnimationStart($event)',\n    '(@transform.done)': '_onAnimationEnd($event)',\n    // must prevent the browser from aligning text based on value\n    '[attr.align]': 'null',\n    '[class.mat-drawer-end]': 'position === \"end\"',\n    '[class.mat-drawer-over]': 'mode === \"over\"',\n    '[class.mat-drawer-push]': 'mode === \"push\"',\n    '[class.mat-drawer-side]': 'mode === \"side\"',\n    'tabIndex': '-1',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatDrawer implements AfterContentInit, AfterContentChecked, OnDestroy {\n  private _focusTrap: FocusTrap;\n  private _elementFocusedBeforeDrawerWasOpened: HTMLElement | null = null;\n\n  /** Whether the drawer is initialized. Used for disabling the initial animation. */\n  private _enableAnimations = false;\n\n  /** The side that the drawer is attached to. */\n  @Input()\n  get position(): 'start' | 'end' { return this._position; }\n  set position(value: 'start' | 'end') {\n    // Make sure we have a valid value.\n    value = value === 'end' ? 'end' : 'start';\n    if (value != this._position) {\n      this._position = value;\n      this.onAlignChanged.emit();\n      this.onPositionChanged.emit();\n    }\n  }\n  private _position: 'start' | 'end' = 'start';\n\n  /**\n   * @deprecated\n   * @deletion-target 6.0.0\n   */\n  @Input()\n  get align(): 'start' | 'end' { return this.position; }\n  set align(value: 'start' | 'end') { this.position = value; }\n\n  /** Mode of the drawer; one of 'over', 'push' or 'side'. */\n  @Input()\n  get mode(): 'over' | 'push' | 'side' { return this._mode; }\n  set mode(value: 'over' | 'push' | 'side') {\n    this._mode = value;\n    this._modeChanged.next();\n  }\n  private _mode: 'over' | 'push' | 'side' = 'over';\n\n  /** Whether the drawer can be closed with the escape key or by clicking on the backdrop. */\n  @Input()\n  get disableClose(): boolean { return this._disableClose; }\n  set disableClose(value: boolean) { this._disableClose = coerceBooleanProperty(value); }\n  private _disableClose: boolean = false;\n\n  /** How the sidenav was opened (keypress, mouse click etc.) */\n  private _openedVia: FocusOrigin | null;\n\n  /** Emits whenever the drawer has started animating. */\n  _animationStarted = new EventEmitter<AnimationEvent>();\n\n  /** Current state of the sidenav animation. */\n  _animationState: 'open-instant' | 'open' | 'void' = 'void';\n\n  /** Event emitted when the drawer open state is changed. */\n  @Output() readonly openedChange: EventEmitter<boolean> =\n      // Note this has to be async in order to avoid some issues with two-bindings (see #8872).\n      new EventEmitter<boolean>(/* isAsync */true);\n\n  /** Event emitted when the drawer has been opened. */\n  @Output('opened')\n  get _openedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => o), map(() => {}));\n  }\n\n  /** Event emitted when the drawer has started opening. */\n  @Output()\n  get openedStart(): Observable<void> {\n    return this._animationStarted.pipe(\n      filter(e => e.fromState !== e.toState && e.toState.indexOf('open') === 0),\n      map(() => {})\n    );\n  }\n\n  /** Event emitted when the drawer has been closed. */\n  @Output('closed')\n  get _closedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => !o), map(() => {}));\n  }\n\n  /** Event emitted when the drawer has started closing. */\n  @Output()\n  get closedStart(): Observable<void> {\n    return this._animationStarted.pipe(\n      filter(e => e.fromState !== e.toState && e.toState === 'void'),\n      map(() => {})\n    );\n  }\n\n  /**\n   * Event emitted when the drawer is fully opened.\n   * @deprecated Use `opened` instead.\n   * @deletion-target 6.0.0\n   */\n  @Output('open') readonly onOpen: Observable<void> = this._openedStream;\n\n  /**\n   * Event emitted when the drawer is fully closed.\n   * @deprecated Use `closed` instead.\n   * @deletion-target 6.0.0\n   */\n  @Output('close') readonly onClose: Observable<void> = this._closedStream;\n\n  /** Event emitted when the drawer's position changes. */\n  @Output('positionChanged') onPositionChanged: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * @deprecated\n   * @deletion-target 6.0.0\n   */\n  @Output('align-changed') onAlignChanged: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * An observable that emits when the drawer mode changes. This is used by the drawer container to\n   * to know when to when the mode changes so it can adapt the margins on the content.\n   */\n  readonly _modeChanged = new Subject();\n\n  get _isFocusTrapEnabled(): boolean {\n    // The focus trap is only enabled when the drawer is open in any mode other than side.\n    return this.opened && this.mode !== 'side';\n  }\n\n  constructor(private _elementRef: ElementRef,\n              private _focusTrapFactory: FocusTrapFactory,\n              private _focusMonitor: FocusMonitor,\n              private _platform: Platform,\n              private _ngZone: NgZone,\n              @Optional() @Inject(DOCUMENT) private _doc: any) {\n\n    this.openedChange.subscribe((opened: boolean) => {\n      if (opened) {\n        if (this._doc) {\n          this._elementFocusedBeforeDrawerWasOpened = this._doc.activeElement as HTMLElement;\n        }\n\n        if (this._isFocusTrapEnabled && this._focusTrap) {\n          this._trapFocus();\n        }\n      } else {\n        this._restoreFocus();\n      }\n    });\n\n    /**\n     * Listen to `keydown` events outside the zone so that change detection is not run every\n     * time a key is pressed. Instead we re-enter the zone only if the `ESC` key is pressed\n     * and we don't have close disabled.\n     */\n    this._ngZone.runOutsideAngular(() => {\n        fromEvent(this._elementRef.nativeElement, 'keydown').pipe(\n            filter((event: KeyboardEvent) => event.keyCode === ESCAPE && !this.disableClose)\n        ).subscribe((event) => this._ngZone.run(() => {\n            this.close();\n            event.stopPropagation();\n        }));\n    });\n  }\n\n  /** Traps focus inside the drawer. */\n  private _trapFocus() {\n    this._focusTrap.focusInitialElementWhenReady().then(hasMovedFocus => {\n      // If there were no focusable elements, focus the sidenav itself so the keyboard navigation\n      // still works. We need to check that `focus` is a function due to Universal.\n      if (!hasMovedFocus && typeof this._elementRef.nativeElement.focus === 'function') {\n        this._elementRef.nativeElement.focus();\n      }\n    });\n  }\n\n  /**\n   * If focus is currently inside the drawer, restores it to where it was before the drawer\n   * opened.\n   */\n  private _restoreFocus() {\n    const activeEl = this._doc && this._doc.activeElement;\n\n    if (activeEl && this._elementRef.nativeElement.contains(activeEl)) {\n      if (this._elementFocusedBeforeDrawerWasOpened instanceof HTMLElement) {\n        this._focusMonitor.focusVia(this._elementFocusedBeforeDrawerWasOpened, this._openedVia);\n      } else {\n        this._elementRef.nativeElement.blur();\n      }\n    }\n\n    this._elementFocusedBeforeDrawerWasOpened = null;\n    this._openedVia = null;\n  }\n\n  ngAfterContentInit() {\n    this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    this._focusTrap.enabled = this._isFocusTrapEnabled;\n  }\n\n  ngAfterContentChecked() {\n    // Enable the animations after the lifecycle hooks have run, in order to avoid animating\n    // drawers that are open by default. When we're on the server, we shouldn't enable the\n    // animations, because we don't want the drawer to animate the first time the user sees\n    // the page.\n    if (this._platform.isBrowser) {\n      this._enableAnimations = true;\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /**\n   * Whether the drawer is opened. We overload this because we trigger an event when it\n   * starts or end.\n   */\n  @Input()\n  get opened(): boolean { return this._opened; }\n  set opened(value: boolean) { this.toggle(coerceBooleanProperty(value)); }\n  private _opened: boolean = false;\n\n  /**\n   * Open the drawer.\n   * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n   * Used for focus management after the sidenav is closed.\n   */\n  open(openedVia?: FocusOrigin): Promise<void> {\n    return this.toggle(true, openedVia);\n  }\n\n  /** Close the drawer. */\n  close(): Promise<void> {\n    return this.toggle(false);\n  }\n\n  /**\n   * Toggle this drawer.\n   * @param isOpen Whether the drawer should be open.\n   * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n   * Used for focus management after the sidenav is closed.\n   */\n  toggle(isOpen: boolean = !this.opened, openedVia: FocusOrigin = 'program'):\n    Promise<void> {\n\n    this._opened = isOpen;\n\n    if (isOpen) {\n      this._animationState = this._enableAnimations ? 'open' : 'open-instant';\n      this._openedVia = openedVia;\n    } else {\n      this._animationState = 'void';\n      this._restoreFocus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.enabled = this._isFocusTrapEnabled;\n    }\n\n    // TODO(crisbeto): This promise is here for backwards-compatibility.\n    // It should be removed next time we do breaking changes in the drawer.\n    // @deletion-target 6.0.0\n    return new Promise<any>(resolve => {\n      this.openedChange.pipe(take(1)).subscribe(open => {\n        resolve(new MatDrawerToggleResult(open ? 'open' : 'close', true));\n      });\n    });\n  }\n\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStarted.emit(event);\n  }\n\n  _onAnimationEnd(event: AnimationEvent) {\n    const {fromState, toState} = event;\n\n    if ((toState.indexOf('open') === 0 && fromState === 'void') ||\n        (toState === 'void' && fromState.indexOf('open') === 0)) {\n      this.openedChange.emit(this._opened);\n    }\n  }\n\n  get _width(): number {\n    return this._elementRef.nativeElement ? (this._elementRef.nativeElement.offsetWidth || 0) : 0;\n  }\n}\n\n\n/**\n * `<mat-drawer-container>` component.\n *\n * This is the parent component to one or two `<mat-drawer>`s that validates the state internally\n * and coordinates the backdrop and content styling.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer-container',\n  exportAs: 'matDrawerContainer',\n  templateUrl: 'drawer-container.html',\n  styleUrls: ['drawer.css'],\n  host: {\n    'class': 'mat-drawer-container',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatDrawerContainer implements AfterContentInit, OnDestroy {\n  @ContentChildren(MatDrawer) _drawers: QueryList<MatDrawer>;\n  @ContentChild(MatDrawerContent) _content: MatDrawerContent;\n\n  /** The drawer child with the `start` position. */\n  get start(): MatDrawer | null { return this._start; }\n\n  /** The drawer child with the `end` position. */\n  get end(): MatDrawer | null { return this._end; }\n\n  /**\n   * Whether to automatically resize the container whenever\n   * the size of any of its drawers changes.\n   *\n   * **Use at your own risk!** Enabling this option can cause layout thrashing by measuring\n   * the drawers on every change detection cycle. Can be configured globally via the\n   * `MAT_DRAWER_DEFAULT_AUTOSIZE` token.\n   */\n  @Input()\n  get autosize(): boolean { return this._autosize; }\n  set autosize(value: boolean) { this._autosize = coerceBooleanProperty(value); }\n  private _autosize: boolean;\n\n  /** Event emitted when the drawer backdrop is clicked. */\n  @Output() readonly backdropClick: EventEmitter<void> = new EventEmitter<void>();\n\n  /** The drawer at the start/end position, independent of direction. */\n  private _start: MatDrawer | null;\n  private _end: MatDrawer | null;\n\n  /**\n   * The drawer at the left/right. When direction changes, these will change as well.\n   * They're used as aliases for the above to set the left/right style properly.\n   * In LTR, _left == _start and _right == _end.\n   * In RTL, _left == _end and _right == _start.\n   */\n  private _left: MatDrawer | null;\n  private _right: MatDrawer | null;\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  /** Emits on every ngDoCheck. Used for debouncing reflows. */\n  private readonly _doCheckSubject = new Subject<void>();\n\n  readonly _contentMargins = new Subject<{left: number|null, right: number|null}>();\n\n  /** Reference to the CdkScrollable instance that wraps the scrollable content. */\n  @ViewChild(CdkScrollable) scrollable: CdkScrollable;\n\n  constructor(@Optional() private _dir: Directionality,\n              private _element: ElementRef,\n              private _ngZone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Inject(MAT_DRAWER_DEFAULT_AUTOSIZE) defaultAutosize = false) {\n\n    // If a `Dir` directive exists up the tree, listen direction changes\n    // and update the left/right properties to point to the proper start/end.\n    if (_dir) {\n      _dir.change.pipe(takeUntil(this._destroyed)).subscribe(() => {\n        this._validateDrawers();\n        this._updateContentMargins();\n      });\n    }\n\n    this._autosize = defaultAutosize;\n  }\n\n  ngAfterContentInit() {\n    this._drawers.changes.pipe(startWith(null)).subscribe(() => {\n      this._validateDrawers();\n\n      this._drawers.forEach((drawer: MatDrawer) => {\n        this._watchDrawerToggle(drawer);\n        this._watchDrawerPosition(drawer);\n        this._watchDrawerMode(drawer);\n      });\n\n      if (!this._drawers.length ||\n          this._isDrawerOpen(this._start) ||\n          this._isDrawerOpen(this._end)) {\n        this._updateContentMargins();\n      }\n\n      this._changeDetectorRef.markForCheck();\n    });\n\n    this._doCheckSubject.pipe(\n      debounceTime(10), // Arbitrary debounce time, less than a frame at 60fps\n      takeUntil(this._destroyed)\n    ).subscribe(() => this._updateContentMargins());\n  }\n\n  ngOnDestroy() {\n    this._doCheckSubject.complete();\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /** Calls `open` of both start and end drawers */\n  open(): void {\n    this._drawers.forEach(drawer => drawer.open());\n  }\n\n  /** Calls `close` of both start and end drawers */\n  close(): void {\n    this._drawers.forEach(drawer => drawer.close());\n  }\n\n  ngDoCheck() {\n    // If users opted into autosizing, do a check every change detection cycle.\n    if (this._autosize && this._isPushed()) {\n      // Run outside the NgZone, otherwise the debouncer will throw us into an infinite loop.\n      this._ngZone.runOutsideAngular(() => this._doCheckSubject.next());\n    }\n  }\n\n  /**\n   * Subscribes to drawer events in order to set a class on the main container element when the\n   * drawer is open and the backdrop is visible. This ensures any overflow on the container element\n   * is properly hidden.\n   */\n  private _watchDrawerToggle(drawer: MatDrawer): void {\n    drawer._animationStarted.pipe(\n      takeUntil(this._drawers.changes),\n      filter((event: AnimationEvent) => event.fromState !== event.toState)\n    )\n    .subscribe((event: AnimationEvent) => {\n      // Set the transition class on the container so that the animations occur. This should not\n      // be set initially because animations should only be triggered via a change in state.\n      if (event.toState !== 'open-instant') {\n        this._element.nativeElement.classList.add('mat-drawer-transition');\n      }\n\n      this._updateContentMargins();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    if (drawer.mode !== 'side') {\n      drawer.openedChange.pipe(takeUntil(this._drawers.changes)).subscribe(() =>\n          this._setContainerClass(drawer.opened));\n    }\n  }\n\n  /**\n   * Subscribes to drawer onPositionChanged event in order to\n   * re-validate drawers when the position changes.\n   */\n  private _watchDrawerPosition(drawer: MatDrawer): void {\n    if (!drawer) {\n      return;\n    }\n    // NOTE: We need to wait for the microtask queue to be empty before validating,\n    // since both drawers may be swapping positions at the same time.\n    drawer.onPositionChanged.pipe(takeUntil(this._drawers.changes)).subscribe(() => {\n      this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\n        this._validateDrawers();\n      });\n    });\n  }\n\n  /** Subscribes to changes in drawer mode so we can run change detection. */\n  private _watchDrawerMode(drawer: MatDrawer): void {\n    if (drawer) {\n      drawer._modeChanged.pipe(takeUntil(merge(this._drawers.changes, this._destroyed)))\n        .subscribe(() => {\n          this._updateContentMargins();\n          this._changeDetectorRef.markForCheck();\n        });\n    }\n  }\n\n  /** Toggles the 'mat-drawer-opened' class on the main 'mat-drawer-container' element. */\n  private _setContainerClass(isAdd: boolean): void {\n    if (isAdd) {\n      this._element.nativeElement.classList.add('mat-drawer-opened');\n    } else {\n      this._element.nativeElement.classList.remove('mat-drawer-opened');\n    }\n  }\n\n  /** Validate the state of the drawer children components. */\n  private _validateDrawers() {\n    this._start = this._end = null;\n\n    // Ensure that we have at most one start and one end drawer.\n    this._drawers.forEach(drawer => {\n      if (drawer.position == 'end') {\n        if (this._end != null) {\n          throwMatDuplicatedDrawerError('end');\n        }\n        this._end = drawer;\n      } else {\n        if (this._start != null) {\n          throwMatDuplicatedDrawerError('start');\n        }\n        this._start = drawer;\n      }\n    });\n\n    this._right = this._left = null;\n\n    // Detect if we're LTR or RTL.\n    if (!this._dir || this._dir.value == 'ltr') {\n      this._left = this._start;\n      this._right = this._end;\n    } else {\n      this._left = this._end;\n      this._right = this._start;\n    }\n  }\n\n  /** Whether the container is being pushed to the side by one of the drawers. */\n  private _isPushed() {\n    return (this._isDrawerOpen(this._start) && this._start!.mode != 'over') ||\n           (this._isDrawerOpen(this._end) && this._end!.mode != 'over');\n  }\n\n  _onBackdropClicked() {\n    this.backdropClick.emit();\n    this._closeModalDrawer();\n  }\n\n  _closeModalDrawer() {\n    // Close all open drawers where closing is not disabled and the mode is not `side`.\n    [this._start, this._end]\n      .filter(drawer => drawer && !drawer.disableClose && drawer.mode !== 'side')\n      .forEach(drawer => drawer!.close());\n  }\n\n  _isShowingBackdrop(): boolean {\n    return (this._isDrawerOpen(this._start) && this._start!.mode != 'side')\n        || (this._isDrawerOpen(this._end) && this._end!.mode != 'side');\n  }\n\n  private _isDrawerOpen(drawer: MatDrawer | null): boolean {\n    return drawer != null && drawer.opened;\n  }\n\n  /**\n   * Recalculates and updates the inline styles for the content. Note that this should be used\n   * sparingly, because it causes a reflow.\n   */\n  private _updateContentMargins() {\n    // 1. For drawers in `over` mode, they don't affect the content.\n    // 2. For drawers in `side` mode they should shrink the content. We do this by adding to the\n    //    left margin (for left drawer) or right margin (for right the drawer).\n    // 3. For drawers in `push` mode the should shift the content without resizing it. We do this by\n    //    adding to the left or right margin and simultaneously subtracting the same amount of\n    //    margin from the other side.\n\n    let left = 0;\n    let right = 0;\n\n    if (this._left && this._left.opened) {\n      if (this._left.mode == 'side') {\n        left += this._left._width;\n      } else if (this._left.mode == 'push') {\n        let width = this._left._width;\n        left += width;\n        right -= width;\n      }\n    }\n\n    if (this._right && this._right.opened) {\n      if (this._right.mode == 'side') {\n        right += this._right._width;\n      } else if (this._right.mode == 'push') {\n        let width = this._right._width;\n        right += width;\n        left -= width;\n      }\n    }\n\n    // Pull back into the NgZone since in some cases we could be outside.\n    this._ngZone.run(() => this._contentMargins.next({left, right}));\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  forwardRef,\n  Inject,\n  Input,\n  ViewEncapsulation,\n  QueryList,\n} from '@angular/core';\nimport {MatDrawer, MatDrawerContainer, MatDrawerContent} from './drawer';\nimport {matDrawerAnimations} from './drawer-animations';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav-content',\n  template: '<ng-content></ng-content>',\n  host: {\n    'class': 'mat-drawer-content mat-sidenav-content',\n    '[style.margin-left.px]': '_margins.left',\n    '[style.margin-right.px]': '_margins.right',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatSidenavContent extends MatDrawerContent {\n  constructor(\n      changeDetectorRef: ChangeDetectorRef,\n      @Inject(forwardRef(() => MatSidenavContainer)) container: MatSidenavContainer) {\n    super(changeDetectorRef, container);\n  }\n}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav',\n  exportAs: 'matSidenav',\n  template: '<ng-content></ng-content>',\n  animations: [matDrawerAnimations.transformDrawer],\n  host: {\n    'class': 'mat-drawer mat-sidenav',\n    'tabIndex': '-1',\n    '[@transform]': '_animationState',\n    '(@transform.start)': '_onAnimationStart($event)',\n    '(@transform.done)': '_onAnimationEnd($event)',\n    // must prevent the browser from aligning text based on value\n    '[attr.align]': 'null',\n    '[class.mat-drawer-end]': 'position === \"end\"',\n    '[class.mat-drawer-over]': 'mode === \"over\"',\n    '[class.mat-drawer-push]': 'mode === \"push\"',\n    '[class.mat-drawer-side]': 'mode === \"side\"',\n    '[class.mat-sidenav-fixed]': 'fixedInViewport',\n    '[style.top.px]': 'fixedInViewport ? fixedTopGap : null',\n    '[style.bottom.px]': 'fixedInViewport ? fixedBottomGap : null',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatSidenav extends MatDrawer {\n  /** Whether the sidenav is fixed in the viewport. */\n  @Input()\n  get fixedInViewport(): boolean { return this._fixedInViewport; }\n  set fixedInViewport(value) { this._fixedInViewport = coerceBooleanProperty(value); }\n  private _fixedInViewport = false;\n\n  /**\n   * The gap between the top of the sidenav and the top of the viewport when the sidenav is in fixed\n   * mode.\n   */\n  @Input()\n  get fixedTopGap(): number { return this._fixedTopGap; }\n  set fixedTopGap(value) { this._fixedTopGap = coerceNumberProperty(value); }\n  private _fixedTopGap = 0;\n\n  /**\n   * The gap between the bottom of the sidenav and the bottom of the viewport when the sidenav is in\n   * fixed mode.\n   */\n  @Input()\n  get fixedBottomGap(): number { return this._fixedBottomGap; }\n  set fixedBottomGap(value) { this._fixedBottomGap = coerceNumberProperty(value); }\n  private _fixedBottomGap = 0;\n}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav-container',\n  exportAs: 'matSidenavContainer',\n  templateUrl: 'sidenav-container.html',\n  styleUrls: ['drawer.css'],\n  host: {\n    'class': 'mat-drawer-container mat-sidenav-container',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatSidenavContainer extends MatDrawerContainer {\n  @ContentChildren(MatSidenav) _drawers: QueryList<MatSidenav>;\n  @ContentChild(MatSidenavContent) _content: MatSidenavContent;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {ScrollDispatchModule} from '@angular/cdk/scrolling';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {MatSidenav, MatSidenavContainer, MatSidenavContent} from './sidenav';\nimport {\n  MatDrawer,\n  MatDrawerContainer,\n  MatDrawerContent,\n  MAT_DRAWER_DEFAULT_AUTOSIZE,\n} from './drawer';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    A11yModule,\n    OverlayModule,\n    ScrollDispatchModule,\n    PlatformModule,\n  ],\n  exports: [\n    MatCommonModule,\n    MatDrawer,\n    MatDrawerContainer,\n    MatDrawerContent,\n    MatSidenav,\n    MatSidenavContainer,\n    MatSidenavContent,\n  ],\n  declarations: [\n    MatDrawer,\n    MatDrawerContainer,\n    MatDrawerContent,\n    MatSidenav,\n    MatSidenavContainer,\n    MatSidenavContent,\n  ],\n  providers: [\n    {provide: MAT_DRAWER_DEFAULT_AUTOSIZE, useValue: false}\n  ]\n})\nexport class MatSidenavModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport * from './sidenav-module';\nexport * from './drawer';\nexport * from './sidenav';\nexport * from './drawer-animations';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"]}