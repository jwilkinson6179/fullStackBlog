{"version":3,"file":"autocomplete.js","sources":["../../../src/lib/autocomplete/autocomplete.ts","../../../src/lib/autocomplete/autocomplete-trigger.ts","../../../src/lib/autocomplete/autocomplete-module.ts","../../../src/lib/autocomplete/public-api.ts","../../../src/lib/autocomplete/index.ts"],"names":["observableOf"],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  AfterContentInit,\n  Component,\n  ContentChildren,\n  ElementRef,\n  Input,\n  QueryList,\n  TemplateRef,\n  ViewChild,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n  ChangeDetectionStrategy,\n  EventEmitter,\n  Output,\n  InjectionToken,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {\n  MatOption,\n  MatOptgroup,\n  MAT_OPTION_PARENT_COMPONENT,\n  mixinDisableRipple,\n  CanDisableRipple,\n} from '@angular/material/core';\nimport {ActiveDescendantKeyManager} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\n\n\n/**\n * Autocomplete IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueAutocompleteIdCounter = 0;\n\n/** Event object that is emitted when an autocomplete option is selected. */\nexport class MatAutocompleteSelectedEvent {\n  constructor(\n    /** Reference to the autocomplete panel that emitted the event. */\n    public source: MatAutocomplete,\n    /** Option that was selected. */\n    public option: MatOption) { }\n}\n\n// Boilerplate for applying mixins to MatAutocomplete.\n/** @docs-private */\nexport class MatAutocompleteBase {}\nexport const _MatAutocompleteMixinBase = mixinDisableRipple(MatAutocompleteBase);\n\n/** Default `mat-autocomplete` options that can be overridden. */\nexport interface MatAutocompleteDefaultOptions {\n  /** Whether the first option should be highlighted when an autocomplete panel is opened. */\n  autoActiveFirstOption?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-autocomplete`. */\nexport const MAT_AUTOCOMPLETE_DEFAULT_OPTIONS =\n    new InjectionToken<MatAutocompleteDefaultOptions>('mat-autocomplete-default-options');\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-autocomplete',\n  templateUrl: 'autocomplete.html',\n  styleUrls: ['autocomplete.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  exportAs: 'matAutocomplete',\n  inputs: ['disableRipple'],\n  host: {\n    'class': 'mat-autocomplete'\n  },\n  providers: [\n    {provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatAutocomplete}\n  ]\n})\nexport class MatAutocomplete extends _MatAutocompleteMixinBase implements AfterContentInit,\n  CanDisableRipple {\n\n  /** Manages active item in option list based on key events. */\n  _keyManager: ActiveDescendantKeyManager<MatOption>;\n\n  /** Whether the autocomplete panel should be visible, depending on option length. */\n  showPanel: boolean = false;\n\n  /** Whether the autocomplete panel is open. */\n  get isOpen(): boolean { return this._isOpen && this.showPanel; }\n  _isOpen: boolean = false;\n\n  /** @docs-private */\n  @ViewChild(TemplateRef) template: TemplateRef<any>;\n\n  /** Element for the panel containing the autocomplete options. */\n  @ViewChild('panel') panel: ElementRef;\n\n  /** @docs-private */\n  @ContentChildren(MatOption, { descendants: true }) options: QueryList<MatOption>;\n\n  /** @docs-private */\n  @ContentChildren(MatOptgroup) optionGroups: QueryList<MatOptgroup>;\n\n  /** Function that maps an option's control value to its display value in the trigger. */\n  @Input() displayWith: ((value: any) => string) | null = null;\n\n  /**\n   * Whether the first option should be highlighted when the autocomplete panel is opened.\n   * Can be configured globally through the `MAT_AUTOCOMPLETE_DEFAULT_OPTIONS` token.\n   */\n  @Input()\n  get autoActiveFirstOption(): boolean { return this._autoActiveFirstOption; }\n  set autoActiveFirstOption(value: boolean) {\n    this._autoActiveFirstOption = coerceBooleanProperty(value);\n  }\n  private _autoActiveFirstOption: boolean;\n\n\n  /** Event that is emitted whenever an option from the list is selected. */\n  @Output() readonly optionSelected: EventEmitter<MatAutocompleteSelectedEvent> =\n      new EventEmitter<MatAutocompleteSelectedEvent>();\n\n  /**\n   * Takes classes set on the host mat-autocomplete element and applies them to the panel\n   * inside the overlay container to allow for easy styling.\n   */\n  @Input('class')\n  set classList(value: string) {\n    if (value && value.length) {\n      value.split(' ').forEach(className => this._classList[className.trim()] = true);\n      this._elementRef.nativeElement.className = '';\n    }\n  }\n  _classList: {[key: string]: boolean} = {};\n\n  /** Unique ID to be used by autocomplete trigger's \"aria-owns\" property. */\n  id: string = `mat-autocomplete-${_uniqueAutocompleteIdCounter++}`;\n\n  constructor(\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _elementRef: ElementRef,\n\n    // @deletion-target Turn into required param in 6.0.0\n    @Optional() @Inject(MAT_AUTOCOMPLETE_DEFAULT_OPTIONS)\n        defaults?: MatAutocompleteDefaultOptions) {\n    super();\n\n    this._autoActiveFirstOption = defaults &&\n        typeof defaults.autoActiveFirstOption !== 'undefined' ?\n            defaults.autoActiveFirstOption :\n            false;\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new ActiveDescendantKeyManager<MatOption>(this.options).withWrap();\n    // Set the initial visibiity state.\n    this._setVisibility();\n  }\n\n  /**\n   * Sets the panel scrollTop. This allows us to manually scroll to display options\n   * above or below the fold, as they are not actually being focused when active.\n   */\n  _setScrollTop(scrollTop: number): void {\n    if (this.panel) {\n      this.panel.nativeElement.scrollTop = scrollTop;\n    }\n  }\n\n  /** Returns the panel's scrollTop. */\n  _getScrollTop(): number {\n    return this.panel ? this.panel.nativeElement.scrollTop : 0;\n  }\n\n  /** Panel should hide itself when the option list is empty. */\n  _setVisibility() {\n    this.showPanel = !!this.options.length;\n    this._classList['mat-autocomplete-visible'] = this.showPanel;\n    this._classList['mat-autocomplete-hidden'] = !this.showPanel;\n    this._changeDetectorRef.markForCheck();\n}\n\n  /** Emits the `select` event. */\n  _emitSelectEvent(option: MatOption): void {\n    const event = new MatAutocompleteSelectedEvent(this, option);\n    this.optionSelected.emit(event);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Directionality} from '@angular/cdk/bidi';\nimport {DOWN_ARROW, ENTER, ESCAPE, UP_ARROW, TAB} from '@angular/cdk/keycodes';\nimport {\n  ConnectedPositionStrategy,\n  Overlay,\n  OverlayRef,\n  OverlayConfig,\n  PositionStrategy,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {filter} from 'rxjs/operators/filter';\nimport {take} from 'rxjs/operators/take';\nimport {switchMap} from 'rxjs/operators/switchMap';\nimport {tap} from 'rxjs/operators/tap';\nimport {delay} from 'rxjs/operators/delay';\nimport {\n  ChangeDetectorRef,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Host,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  ViewContainerRef,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  MatOption,\n  MatOptionSelectionChange,\n  _getOptionScrollPosition,\n  _countGroupLabelsBeforeOption,\n} from '@angular/material/core';\nimport {MatFormField} from '@angular/material/form-field';\nimport {DOCUMENT} from '@angular/common';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\nimport {defer} from 'rxjs/observable/defer';\nimport {fromEvent} from 'rxjs/observable/fromEvent';\nimport {merge} from 'rxjs/observable/merge';\nimport {of as observableOf} from 'rxjs/observable/of';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MatAutocomplete} from './autocomplete';\n\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the scrollTop of the panel. Because we are not\n * actually focusing the active item, scroll must be handled manually.\n */\n\n/** The height of each autocomplete option. */\nexport const AUTOCOMPLETE_OPTION_HEIGHT = 48;\n\n/** The total height of the autocomplete panel. */\nexport const AUTOCOMPLETE_PANEL_HEIGHT = 256;\n\n/** Injection token that determines the scroll handling while the autocomplete panel is open. */\nexport const MAT_AUTOCOMPLETE_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-autocomplete-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_AUTOCOMPLETE_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n/**\n * Provider that allows the autocomplete to register as a ControlValueAccessor.\n * @docs-private\n */\nexport const MAT_AUTOCOMPLETE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatAutocompleteTrigger),\n  multi: true\n};\n\n/**\n * Creates an error to be thrown when attempting to use an autocomplete trigger without a panel.\n */\nexport function getMatAutocompleteMissingPanelError(): Error {\n  return Error('Attempting to open an undefined instance of `mat-autocomplete`. ' +\n               'Make sure that the id passed to the `matAutocomplete` is correct and that ' +\n               'you\\'re attempting to open it after the ngAfterContentInit hook.');\n}\n\n@Directive({\n  selector: `input[matAutocomplete], textarea[matAutocomplete]`,\n  host: {\n    'role': 'combobox',\n    'autocomplete': 'off',\n    'aria-autocomplete': 'list',\n    '[attr.aria-activedescendant]': 'activeOption?.id',\n    '[attr.aria-expanded]': 'panelOpen.toString()',\n    '[attr.aria-owns]': 'autocomplete?.id',\n    // Note: we use `focusin`, as opposed to `focus`, in order to open the panel\n    // a little earlier. This avoids issues where IE delays the focusing of the input.\n    '(focusin)': '_handleFocus()',\n    '(blur)': '_onTouched()',\n    '(input)': '_handleInput($event)',\n    '(keydown)': '_handleKeydown($event)',\n  },\n  exportAs: 'matAutocompleteTrigger',\n  providers: [MAT_AUTOCOMPLETE_VALUE_ACCESSOR]\n})\nexport class MatAutocompleteTrigger implements ControlValueAccessor, OnDestroy {\n  private _overlayRef: OverlayRef | null;\n  private _portal: TemplatePortal;\n  private _componentDestroyed = false;\n\n  /** Old value of the native input. Used to work around issues with the `input` event on IE. */\n  private _previousValue: string | number | null;\n\n  /** Strategy that is used to position the panel. */\n  private _positionStrategy: ConnectedPositionStrategy;\n\n  /** Whether or not the label state is being overridden. */\n  private _manuallyFloatingLabel = false;\n\n  /** The subscription for closing actions (some are bound to document). */\n  private _closingActionsSubscription: Subscription;\n\n  /** Stream of keyboard events that can close the panel. */\n  private readonly _closeKeyEventStream = new Subject<void>();\n\n  /** `View -> model callback called when value changes` */\n  _onChange: (value: any) => void = () => {};\n\n  /** `View -> model callback called when autocomplete has been touched` */\n  _onTouched = () => {};\n\n  /** The autocomplete panel to be attached to this trigger. */\n  @Input('matAutocomplete') autocomplete: MatAutocomplete;\n\n  constructor(private _element: ElementRef, private _overlay: Overlay,\n              private _viewContainerRef: ViewContainerRef,\n              private _zone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Inject(MAT_AUTOCOMPLETE_SCROLL_STRATEGY) private _scrollStrategy,\n              @Optional() private _dir: Directionality,\n              @Optional() @Host() private _formField: MatFormField,\n              @Optional() @Inject(DOCUMENT) private _document: any) {}\n\n  ngOnDestroy() {\n    this._componentDestroyed = true;\n    this._destroyPanel();\n    this._closeKeyEventStream.complete();\n  }\n\n  /** Whether or not the autocomplete panel is open. */\n  get panelOpen(): boolean { return this._panelOpen && this.autocomplete.showPanel; }\n  private _panelOpen: boolean = false;\n\n  /** Opens the autocomplete suggestion panel. */\n  openPanel(): void {\n    this._attachOverlay();\n    this._floatLabel();\n  }\n\n  /** Closes the autocomplete suggestion panel. */\n  closePanel(): void {\n    this._resetLabel();\n\n    if (this._panelOpen) {\n      this.autocomplete._isOpen = this._panelOpen = false;\n\n      if (this._overlayRef && this._overlayRef.hasAttached()) {\n        this._overlayRef.detach();\n        this._closingActionsSubscription.unsubscribe();\n      }\n\n      // Note that in some cases this can end up being called after the component is destroyed.\n      // Add a check to ensure that we don't try to run change detection on a destroyed view.\n      if (!this._componentDestroyed) {\n        // We need to trigger change detection manually, because\n        // `fromEvent` doesn't seem to do it at the proper time.\n        // This ensures that the label is reset when the\n        // user clicks outside.\n        this._changeDetectorRef.detectChanges();\n      }\n    }\n  }\n\n  /**\n   * A stream of actions that should close the autocomplete panel, including\n   * when an option is selected, on blur, and when TAB is pressed.\n   */\n  get panelClosingActions(): Observable<MatOptionSelectionChange> {\n    return merge(\n      this.optionSelections,\n      this.autocomplete._keyManager.tabOut.pipe(filter(() => this._panelOpen)),\n      this._closeKeyEventStream,\n      this._outsideClickStream,\n      this._overlayRef ?\n          this._overlayRef.detachments().pipe(filter(() => this._panelOpen)) :\n          observableOf()\n    );\n  }\n\n  /** Stream of autocomplete option selections. */\n  readonly optionSelections: Observable<MatOptionSelectionChange> = defer(() => {\n    if (this.autocomplete && this.autocomplete.options) {\n     return merge(...this.autocomplete.options.map(option => option.onSelectionChange));\n    }\n\n    // If there are any subscribers before `ngAfterViewInit`, the `autocomplete` will be undefined.\n    // Return a stream that we'll replace with the real one once everything is in place.\n    return this._zone.onStable\n        .asObservable()\n        .pipe(take(1), switchMap(() => this.optionSelections));\n  });\n\n  /** The currently active option, coerced to MatOption type. */\n  get activeOption(): MatOption | null {\n    if (this.autocomplete && this.autocomplete._keyManager) {\n      return this.autocomplete._keyManager.activeItem;\n    }\n\n    return null;\n  }\n\n  /** Stream of clicks outside of the autocomplete panel. */\n  private get _outsideClickStream(): Observable<any> {\n    if (!this._document) {\n      return observableOf(null);\n    }\n\n    return merge(\n      fromEvent(this._document, 'click'),\n      fromEvent(this._document, 'touchend')\n    )\n    .pipe(filter((event: MouseEvent | TouchEvent) => {\n      const clickTarget = event.target as HTMLElement;\n      const formField = this._formField ?\n          this._formField._elementRef.nativeElement : null;\n\n      return this._panelOpen &&\n              clickTarget !== this._element.nativeElement &&\n              (!formField || !formField.contains(clickTarget)) &&\n              (!!this._overlayRef && !this._overlayRef.overlayElement.contains(clickTarget));\n    }));\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any): void {\n    Promise.resolve(null).then(() => this._setTriggerValue(value));\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => {}): void {\n    this._onChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => {}) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean) {\n    this._element.nativeElement.disabled = isDisabled;\n  }\n\n  _handleKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n\n    // Prevent the default action on all escape key presses. This is here primarily to bring IE\n    // in line with other browsers. By default, pressing escape on IE will cause it to revert\n    // the input value to the one that it had on focus, however it won't dispatch any events\n    // which means that the model value will be out of sync with the view.\n    if (keyCode === ESCAPE) {\n      event.preventDefault();\n    }\n\n    // Close when pressing ESCAPE or ALT + UP_ARROW, based on the a11y guidelines.\n    // See: https://www.w3.org/TR/wai-aria-practices-1.1/#textbox-keyboard-interaction\n    if (this.panelOpen && (keyCode === ESCAPE || (keyCode === UP_ARROW && event.altKey))) {\n      this._resetActiveItem();\n      this._closeKeyEventStream.next();\n      event.stopPropagation();\n    } else if (this.activeOption && keyCode === ENTER && this.panelOpen) {\n      this.activeOption._selectViaInteraction();\n      this._resetActiveItem();\n      event.preventDefault();\n    } else {\n      const prevActiveItem = this.autocomplete._keyManager.activeItem;\n      const isArrowKey = keyCode === UP_ARROW || keyCode === DOWN_ARROW;\n\n      if (this.panelOpen || keyCode === TAB) {\n        this.autocomplete._keyManager.onKeydown(event);\n      } else if (isArrowKey && this._canOpen()) {\n        this.openPanel();\n      }\n\n      if (isArrowKey || this.autocomplete._keyManager.activeItem !== prevActiveItem) {\n        this._scrollToOption();\n      }\n    }\n  }\n\n  _handleInput(event: KeyboardEvent): void {\n    let target = event.target as HTMLInputElement;\n    let value: number | string | null = target.value;\n\n    // Based on `NumberValueAccessor` from forms.\n    if (target.type === 'number') {\n      value = value == '' ? null : parseFloat(value);\n    }\n\n    // If the input has a placeholder, IE will fire the `input` event on page load,\n    // focus and blur, in addition to when the user actually changed the value. To\n    // filter out all of the extra events, we save the value on focus and between\n    // `input` events, and we check whether it changed.\n    // See: https://connect.microsoft.com/IE/feedback/details/885747/\n    if (this._canOpen() && this._previousValue !== value &&\n      document.activeElement === event.target) {\n      this._previousValue = value;\n      this._onChange(value);\n      this.openPanel();\n    }\n  }\n\n  _handleFocus(): void {\n    if (this._canOpen()) {\n      this._previousValue = this._element.nativeElement.value;\n      this._attachOverlay();\n      this._floatLabel(true);\n    }\n  }\n\n  /**\n   * In \"auto\" mode, the label will animate down as soon as focus is lost.\n   * This causes the value to jump when selecting an option with the mouse.\n   * This method manually floats the label until the panel can be closed.\n   * @param shouldAnimate Whether the label should be animated when it is floated.\n   */\n  private _floatLabel(shouldAnimate = false): void {\n    if (this._formField && this._formField.floatLabel === 'auto') {\n      if (shouldAnimate) {\n        this._formField._animateAndLockLabel();\n      } else {\n        this._formField.floatLabel = 'always';\n      }\n\n      this._manuallyFloatingLabel = true;\n    }\n  }\n\n  /** If the label has been manually elevated, return it to its normal state. */\n  private _resetLabel(): void  {\n    if (this._manuallyFloatingLabel) {\n      this._formField.floatLabel = 'auto';\n      this._manuallyFloatingLabel = false;\n    }\n  }\n\n  /**\n   * Given that we are not actually focusing active options, we must manually adjust scroll\n   * to reveal options below the fold. First, we find the offset of the option from the top\n   * of the panel. If that offset is below the fold, the new scrollTop will be the offset -\n   * the panel height + the option height, so the active option will be just visible at the\n   * bottom of the panel. If that offset is above the top of the visible panel, the new scrollTop\n   * will become the offset. If that offset is visible within the panel already, the scrollTop is\n   * not adjusted.\n   */\n  private _scrollToOption(): void {\n    const index = this.autocomplete._keyManager.activeItemIndex || 0;\n    const labelCount = _countGroupLabelsBeforeOption(index,\n        this.autocomplete.options, this.autocomplete.optionGroups);\n\n    const newScrollPosition = _getOptionScrollPosition(\n      index + labelCount,\n      AUTOCOMPLETE_OPTION_HEIGHT,\n      this.autocomplete._getScrollTop(),\n      AUTOCOMPLETE_PANEL_HEIGHT\n    );\n\n    this.autocomplete._setScrollTop(newScrollPosition);\n  }\n\n  /**\n   * This method listens to a stream of panel closing actions and resets the\n   * stream every time the option list changes.\n   */\n  private _subscribeToClosingActions(): Subscription {\n    const firstStable = this._zone.onStable.asObservable().pipe(take(1));\n    const optionChanges = this.autocomplete.options.changes.pipe(\n      tap(() => this._positionStrategy.recalculateLastPosition()),\n      // Defer emitting to the stream until the next tick, because changing\n      // bindings in here will cause \"changed after checked\" errors.\n      delay(0)\n    );\n\n    // When the zone is stable initially, and when the option list changes...\n    return merge(firstStable, optionChanges)\n      .pipe(\n        // create a new stream of panelClosingActions, replacing any previous streams\n        // that were created, and flatten it so our stream only emits closing events...\n        switchMap(() => {\n          this._resetActiveItem();\n          this.autocomplete._setVisibility();\n          return this.panelClosingActions;\n        }),\n        // when the first closing event occurs...\n        take(1)\n      )\n      // set the value, close the panel, and complete.\n      .subscribe(event => this._setValueAndClose(event));\n  }\n\n  /** Destroys the autocomplete suggestion panel. */\n  private _destroyPanel(): void {\n    if (this._overlayRef) {\n      this.closePanel();\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n  }\n\n  private _setTriggerValue(value: any): void {\n    const toDisplay = this.autocomplete && this.autocomplete.displayWith ?\n      this.autocomplete.displayWith(value) :\n      value;\n\n    // Simply falling back to an empty string if the display value is falsy does not work properly.\n    // The display value can also be the number zero and shouldn't fall back to an empty string.\n    const inputValue = toDisplay != null ? toDisplay : '';\n\n    // If it's used within a `MatFormField`, we should set it through the property so it can go\n    // through change detection.\n    if (this._formField) {\n      this._formField._control.value = inputValue;\n    } else {\n      this._element.nativeElement.value = inputValue;\n    }\n  }\n\n  /**\n   * This method closes the panel, and if a value is specified, also sets the associated\n   * control to that value. It will also mark the control as dirty if this interaction\n   * stemmed from the user.\n   */\n  private _setValueAndClose(event: MatOptionSelectionChange | null): void {\n    if (event && event.source) {\n      this._clearPreviousSelectedOption(event.source);\n      this._setTriggerValue(event.source.value);\n      this._onChange(event.source.value);\n      this._element.nativeElement.focus();\n      this.autocomplete._emitSelectEvent(event.source);\n    }\n\n    this.closePanel();\n  }\n\n  /**\n   * Clear any previous selected option and emit a selection change event for this option\n   */\n  private _clearPreviousSelectedOption(skip: MatOption) {\n    this.autocomplete.options.forEach(option => {\n      if (option != skip && option.selected) {\n        option.deselect();\n      }\n    });\n  }\n\n  private _attachOverlay(): void {\n    if (!this.autocomplete) {\n      throw getMatAutocompleteMissingPanelError();\n    }\n\n    if (!this._overlayRef) {\n      this._portal = new TemplatePortal(this.autocomplete.template, this._viewContainerRef);\n      this._overlayRef = this._overlay.create(this._getOverlayConfig());\n    } else {\n      /** Update the panel width, in case the host width has changed */\n      this._overlayRef.updateSize({width: this._getHostWidth()});\n    }\n\n    if (this._overlayRef && !this._overlayRef.hasAttached()) {\n      this._overlayRef.attach(this._portal);\n      this._closingActionsSubscription = this._subscribeToClosingActions();\n    }\n\n    this.autocomplete._setVisibility();\n    this.autocomplete._isOpen = this._panelOpen = true;\n  }\n\n  private _getOverlayConfig(): OverlayConfig {\n    return new OverlayConfig({\n      positionStrategy: this._getOverlayPosition(),\n      scrollStrategy: this._scrollStrategy(),\n      width: this._getHostWidth(),\n      direction: this._dir ? this._dir.value : 'ltr'\n    });\n  }\n\n  private _getOverlayPosition(): PositionStrategy {\n    this._positionStrategy = this._overlay.position().connectedTo(\n        this._getConnectedElement(),\n        {originX: 'start', originY: 'bottom'}, {overlayX: 'start', overlayY: 'top'})\n        .withFallbackPosition(\n            {originX: 'start', originY: 'top'}, {overlayX: 'start', overlayY: 'bottom'}\n        );\n    return this._positionStrategy;\n  }\n\n  private _getConnectedElement(): ElementRef {\n    return this._formField ? this._formField._connectionContainerRef : this._element;\n  }\n\n  /** Returns the width of the input element, so the panel width can match it. */\n  private _getHostWidth(): number {\n    return this._getConnectedElement().nativeElement.getBoundingClientRect().width;\n  }\n\n  /**\n   * Resets the active item to -1 so arrow events will activate the\n   * correct options, or to 0 if the consumer opted into it.\n   */\n  private _resetActiveItem(): void {\n    this.autocomplete._keyManager.setActiveItem(this.autocomplete.autoActiveFirstOption ? 0 : -1);\n  }\n\n  /** Determines whether the panel can be opened. */\n  private _canOpen(): boolean {\n    const element: HTMLInputElement = this._element.nativeElement;\n    return !element.readOnly && !element.disabled;\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {MatOptionModule, MatCommonModule} from '@angular/material/core';\nimport {MatAutocomplete} from './autocomplete';\nimport {\n  MatAutocompleteTrigger,\n  MAT_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER,\n} from './autocomplete-trigger';\n\n@NgModule({\n  imports: [MatOptionModule, OverlayModule, MatCommonModule, CommonModule],\n  exports: [MatAutocomplete, MatOptionModule, MatAutocompleteTrigger, MatCommonModule],\n  declarations: [MatAutocomplete, MatAutocompleteTrigger],\n  providers: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER],\n})\nexport class MatAutocompleteModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport * from './autocomplete';\nexport * from './autocomplete-module';\nexport * from './autocomplete-trigger';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"]}