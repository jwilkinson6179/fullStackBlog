{"version":3,"file":"form-field.js","sources":["../../../src/lib/form-field/error.ts","../../../src/lib/form-field/form-field-animations.ts","../../../src/lib/form-field/form-field-control.ts","../../../src/lib/form-field/form-field-errors.ts","../../../src/lib/form-field/hint.ts","../../../src/lib/form-field/label.ts","../../../src/lib/form-field/placeholder.ts","../../../src/lib/form-field/prefix.ts","../../../src/lib/form-field/suffix.ts","../../../src/lib/form-field/form-field.ts","../../../src/lib/form-field/form-field-module.ts","../../../src/lib/form-field/public-api.ts","../../../src/lib/form-field/index.ts"],"names":["nextUniqueId"],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\n\n\nlet nextUniqueId = 0;\n\n\n/** Single error message to be shown underneath the form field. */\n@Directive({\n  selector: 'mat-error',\n  host: {\n    'class': 'mat-error',\n    'role': 'alert',\n    '[attr.id]': 'id',\n  }\n})\nexport class MatError {\n  @Input() id: string = `mat-error-${nextUniqueId++}`;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the MatFormField. */\nexport const matFormFieldAnimations: {\n  readonly transitionMessages: AnimationTriggerMetadata\n} = {\n  /** Animation that transitions the form field's error and hint messages. */\n  transitionMessages: trigger('transitionMessages', [\n    // TODO(mmalerba): Use angular animations for label animation as well.\n    state('enter', style({ opacity: 1, transform: 'translateY(0%)' })),\n    transition('void => enter', [\n      style({ opacity: 0, transform: 'translateY(-100%)' }),\n      animate('300ms cubic-bezier(0.55, 0, 0.55, 0.2)'),\n    ]),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Observable} from 'rxjs/Observable';\nimport {NgControl} from '@angular/forms';\n\n\n/** An interface which allows a control to work inside of a `MatFormField`. */\nexport abstract class MatFormFieldControl<T> {\n  /** The value of the control. */\n  value: T | null;\n\n  /**\n   * Stream that emits whenever the state of the control changes such that the parent `MatFormField`\n   * needs to run change detection.\n   */\n  readonly stateChanges: Observable<void>;\n\n  /** The element ID for this control. */\n  readonly id: string;\n\n  /** The placeholder for this control. */\n  readonly placeholder: string;\n\n  /** Gets the NgControl for this control. */\n  readonly ngControl: NgControl | null;\n\n  /** Whether the control is focused. */\n  readonly focused: boolean;\n\n  /** Whether the control is empty. */\n  readonly empty: boolean;\n\n  /** Whether the `MatFormField` label should try to float. */\n  readonly shouldLabelFloat?: boolean;\n\n  /**\n   * Whether the `MatFormField` placeholder should try to float.\n   * @deprecated Use `shouldLabelFloat` instead.\n   * @deletion-target 6.0.0\n   */\n  readonly shouldPlaceholderFloat?: boolean;\n\n  /** Whether the control is required. */\n  readonly required: boolean;\n\n  /** Whether the control is disabled. */\n  readonly disabled: boolean;\n\n  /** Whether the control is in an error state. */\n  readonly errorState: boolean;\n\n  /**\n   * An optional name for the control type that can be used to distinguish `mat-form-field` elements\n   * based on their control type. The form field will add a class,\n   * `mat-form-field-type-{{controlType}}` to its root element.\n   */\n  readonly controlType?: string;\n\n  /** Sets the list of element IDs that currently describe this control. */\n  abstract setDescribedByIds(ids: string[]): void;\n\n  /** Handles a click on the control's container. */\n  abstract onContainerClick(event: MouseEvent): void;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getMatFormFieldPlaceholderConflictError(): Error {\n  return Error('Placeholder attribute and child element were both specified.');\n}\n\n/** @docs-private */\nexport function getMatFormFieldDuplicatedHintError(align: string): Error {\n  return Error(`A hint was already declared for 'align=\"${align}\"'.`);\n}\n\n/** @docs-private */\nexport function getMatFormFieldMissingControlError(): Error {\n  return Error('mat-form-field must contain a MatFormFieldControl.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\n\n\nlet nextUniqueId = 0;\n\n\n/** Hint text to be shown underneath the form field control. */\n@Directive({\n  selector: 'mat-hint',\n  host: {\n    'class': 'mat-hint',\n    '[class.mat-right]': 'align == \"end\"',\n    '[attr.id]': 'id',\n    // Remove align attribute to prevent it from interfering with layout.\n    '[attr.align]': 'null',\n  }\n})\nexport class MatHint {\n  /** Whether to align the hint label at the start or end of the line. */\n  @Input() align: 'start' | 'end' = 'start';\n\n  /** Unique ID for the hint. Used for the aria-describedby on the form field control. */\n  @Input() id: string = `mat-hint-${nextUniqueId++}`;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** The floating label for a `mat-form-field`. */\n@Directive({\n  selector: 'mat-label'\n})\nexport class MatLabel {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** The placeholder text for an `MatFormField`. */\n@Directive({\n  selector: 'mat-placeholder'\n})\nexport class MatPlaceholder {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** Prefix to be placed the the front of the form field. */\n@Directive({\n  selector: '[matPrefix]',\n})\nexport class MatPrefix {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** Suffix to be placed at the end of the form field. */\n@Directive({\n  selector: '[matSuffix]',\n})\nexport class MatSuffix {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  Inject,\n  Input,\n  Optional,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor,\n  FloatLabelType,\n  LabelOptions,\n  MAT_LABEL_GLOBAL_OPTIONS,\n  mixinColor,\n  ThemePalette\n} from '@angular/material/core';\nimport {fromEvent} from 'rxjs/observable/fromEvent';\nimport {startWith} from 'rxjs/operators/startWith';\nimport {take} from 'rxjs/operators/take';\nimport {MatError} from './error';\nimport {matFormFieldAnimations} from './form-field-animations';\nimport {MatFormFieldControl} from './form-field-control';\nimport {\n  getMatFormFieldDuplicatedHintError,\n  getMatFormFieldMissingControlError,\n  getMatFormFieldPlaceholderConflictError,\n} from './form-field-errors';\nimport {MatHint} from './hint';\nimport {MatLabel} from './label';\nimport {MatPlaceholder} from './placeholder';\nimport {MatPrefix} from './prefix';\nimport {MatSuffix} from './suffix';\n\n\n// Boilerplate for applying mixins to MatFormField.\n/** @docs-private */\nexport class MatFormFieldBase {\n  constructor(public _elementRef: ElementRef) { }\n}\n\nexport const _MatFormFieldMixinBase = mixinColor(MatFormFieldBase, 'primary');\n\n\nlet nextUniqueId = 0;\n\n\n/** Container for form controls that applies Material Design styling and behavior. */\n@Component({\n  moduleId: module.id,\n  // TODO(mmalerba): the input-container selectors and classes are deprecated and will be removed.\n  selector: 'mat-input-container, mat-form-field',\n  exportAs: 'matFormField',\n  templateUrl: 'form-field.html',\n  // MatInput is a directive and can't have styles, so we need to include its styles here.\n  // The MatInput styles are fairly minimal so it shouldn't be a big deal for people who\n  // aren't using MatInput.\n  styleUrls: ['form-field.css', '../input/input.css'],\n  animations: [matFormFieldAnimations.transitionMessages],\n  host: {\n    'class': 'mat-input-container mat-form-field',\n    '[class.mat-input-invalid]': '_control.errorState',\n    '[class.mat-form-field-invalid]': '_control.errorState',\n    '[class.mat-form-field-can-float]': '_canLabelFloat',\n    '[class.mat-form-field-should-float]': '_shouldLabelFloat()',\n    '[class.mat-form-field-hide-placeholder]': '_hideControlPlaceholder()',\n    '[class.mat-form-field-disabled]': '_control.disabled',\n    '[class.mat-focused]': '_control.focused',\n    '[class.ng-untouched]': '_shouldForward(\"untouched\")',\n    '[class.ng-touched]': '_shouldForward(\"touched\")',\n    '[class.ng-pristine]': '_shouldForward(\"pristine\")',\n    '[class.ng-dirty]': '_shouldForward(\"dirty\")',\n    '[class.ng-valid]': '_shouldForward(\"valid\")',\n    '[class.ng-invalid]': '_shouldForward(\"invalid\")',\n    '[class.ng-pending]': '_shouldForward(\"pending\")',\n  },\n  inputs: ['color'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\n\nexport class MatFormField extends _MatFormFieldMixinBase\n    implements AfterContentInit, AfterContentChecked, AfterViewInit, CanColor {\n  private _labelOptions: LabelOptions;\n\n  /**\n   * @deprecated Use `color` instead.\n   * @deletion-target 6.0.0\n   */\n  @Input()\n  get dividerColor(): ThemePalette { return this.color; }\n  set dividerColor(value: ThemePalette) { this.color = value; }\n\n  /** Whether the required marker should be hidden. */\n  @Input()\n  get hideRequiredMarker(): boolean { return this._hideRequiredMarker; }\n  set hideRequiredMarker(value: boolean) {\n    this._hideRequiredMarker = coerceBooleanProperty(value);\n  }\n  private _hideRequiredMarker: boolean;\n\n  /** Override for the logic that disables the label animation in certain cases. */\n  private _showAlwaysAnimate = false;\n\n  /** Whether the floating label should always float or not. */\n  get _shouldAlwaysFloat(): boolean {\n    return this._floatLabel === 'always' && !this._showAlwaysAnimate;\n  }\n\n  /** Whether the label can float or not. */\n  get _canLabelFloat(): boolean { return this._floatLabel !== 'never'; }\n\n  /** State of the mat-hint and mat-error animations. */\n  _subscriptAnimationState: string = '';\n\n  /** Text for the form field hint. */\n  @Input()\n  get hintLabel(): string { return this._hintLabel; }\n  set hintLabel(value: string) {\n    this._hintLabel = value;\n    this._processHints();\n  }\n  private _hintLabel = '';\n\n  // Unique id for the hint label.\n  _hintLabelId: string = `mat-hint-${nextUniqueId++}`;\n\n  /**\n   * Whether the placeholder should always float, never float or float as the user types.\n   * @deprecated Use floatLabel instead.\n   * @deletion-target 6.0.0\n   */\n  @Input()\n  get floatPlaceholder(): FloatLabelType { return this._floatLabel; }\n  set floatPlaceholder(value: FloatLabelType) { this.floatLabel = value; }\n\n  /** Whether the label should always float, never float or float as the user types. */\n  @Input()\n  get floatLabel(): FloatLabelType { return this._floatLabel; }\n  set floatLabel(value: FloatLabelType) {\n    if (value !== this._floatLabel) {\n      this._floatLabel = value || this._labelOptions.float || 'auto';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _floatLabel: FloatLabelType;\n\n  /** Reference to the form field's underline element. */\n  @ViewChild('underline') underlineRef: ElementRef;\n  @ViewChild('connectionContainer') _connectionContainerRef: ElementRef;\n  @ViewChild('inputContainer') _inputContainerRef: ElementRef;\n  @ViewChild('label') private _label: ElementRef;\n  @ContentChild(MatFormFieldControl) _control: MatFormFieldControl<any>;\n  @ContentChild(MatPlaceholder) _placeholderChild: MatPlaceholder;\n  @ContentChild(MatLabel) _labelChild: MatLabel;\n  @ContentChildren(MatError) _errorChildren: QueryList<MatError>;\n  @ContentChildren(MatHint) _hintChildren: QueryList<MatHint>;\n  @ContentChildren(MatPrefix) _prefixChildren: QueryList<MatPrefix>;\n  @ContentChildren(MatSuffix) _suffixChildren: QueryList<MatSuffix>;\n\n  constructor(\n      public _elementRef: ElementRef,\n      private _changeDetectorRef: ChangeDetectorRef,\n      @Optional() @Inject(MAT_LABEL_GLOBAL_OPTIONS) labelOptions: LabelOptions) {\n    super(_elementRef);\n\n    this._labelOptions = labelOptions ? labelOptions : {};\n    this.floatLabel = this._labelOptions.float || 'auto';\n  }\n\n  ngAfterContentInit() {\n    this._validateControlChild();\n    if (this._control.controlType) {\n      this._elementRef.nativeElement.classList\n          .add(`mat-form-field-type-${this._control.controlType}`);\n    }\n\n    // Subscribe to changes in the child control state in order to update the form field UI.\n    this._control.stateChanges.pipe(startWith(null!)).subscribe(() => {\n      this._validatePlaceholders();\n      this._syncDescribedByIds();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    let ngControl = this._control.ngControl;\n    if (ngControl && ngControl.valueChanges) {\n      ngControl.valueChanges.subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n      });\n    }\n\n    // Re-validate when the number of hints changes.\n    this._hintChildren.changes.pipe(startWith(null)).subscribe(() => {\n      this._processHints();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Update the aria-described by when the number of errors changes.\n    this._errorChildren.changes.pipe(startWith(null)).subscribe(() => {\n      this._syncDescribedByIds();\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  ngAfterContentChecked() {\n    this._validateControlChild();\n  }\n\n  ngAfterViewInit() {\n    // Avoid animations on load.\n    this._subscriptAnimationState = 'enter';\n    this._changeDetectorRef.detectChanges();\n  }\n\n  /** Determines whether a class from the NgControl should be forwarded to the host element. */\n  _shouldForward(prop: string): boolean {\n    let ngControl = this._control ? this._control.ngControl : null;\n    return ngControl && (ngControl as any)[prop];\n  }\n\n  _hasPlaceholder() {\n    return !!(this._control.placeholder || this._placeholderChild);\n  }\n\n  _hasLabel() {\n    return !!this._labelChild;\n  }\n\n  _shouldLabelFloat() {\n    return this._canLabelFloat && (this._control.shouldLabelFloat ||\n        this._control.shouldPlaceholderFloat || this._shouldAlwaysFloat);\n  }\n\n  _hideControlPlaceholder() {\n    return !this._hasLabel() || !this._shouldLabelFloat();\n  }\n\n  _hasFloatingLabel() {\n    return this._hasLabel() || this._hasPlaceholder();\n  }\n\n  /** Determines whether to display hints or errors. */\n  _getDisplayedMessages(): 'error' | 'hint' {\n    return (this._errorChildren && this._errorChildren.length > 0 &&\n        this._control.errorState) ? 'error' : 'hint';\n  }\n\n  /** Animates the placeholder up and locks it in position. */\n  _animateAndLockLabel(): void {\n    if (this._hasFloatingLabel() && this._canLabelFloat) {\n      this._showAlwaysAnimate = true;\n      this._floatLabel = 'always';\n\n      fromEvent(this._label.nativeElement, 'transitionend').pipe(take(1)).subscribe(() => {\n        this._showAlwaysAnimate = false;\n      });\n\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * Ensure that there is only one placeholder (either `placeholder` attribute on the child control\n   * or child element with the `mat-placeholder` directive).\n   */\n  private _validatePlaceholders() {\n    if (this._control.placeholder && this._placeholderChild) {\n      throw getMatFormFieldPlaceholderConflictError();\n    }\n  }\n\n  /** Does any extra processing that is required when handling the hints. */\n  private _processHints() {\n    this._validateHints();\n    this._syncDescribedByIds();\n  }\n\n  /**\n   * Ensure that there is a maximum of one of each `<mat-hint>` alignment specified, with the\n   * attribute being considered as `align=\"start\"`.\n   */\n  private _validateHints() {\n    if (this._hintChildren) {\n      let startHint: MatHint;\n      let endHint: MatHint;\n      this._hintChildren.forEach((hint: MatHint) => {\n        if (hint.align === 'start') {\n          if (startHint || this.hintLabel) {\n            throw getMatFormFieldDuplicatedHintError('start');\n          }\n          startHint = hint;\n        } else if (hint.align === 'end') {\n          if (endHint) {\n            throw getMatFormFieldDuplicatedHintError('end');\n          }\n          endHint = hint;\n        }\n      });\n    }\n  }\n\n  /**\n   * Sets the list of element IDs that describe the child control. This allows the control to update\n   * its `aria-describedby` attribute accordingly.\n   */\n  private _syncDescribedByIds() {\n    if (this._control) {\n      let ids: string[] = [];\n\n      if (this._getDisplayedMessages() === 'hint') {\n        let startHint = this._hintChildren ?\n            this._hintChildren.find(hint => hint.align === 'start') : null;\n        let endHint = this._hintChildren ?\n            this._hintChildren.find(hint => hint.align === 'end') : null;\n\n        if (startHint) {\n          ids.push(startHint.id);\n        } else if (this._hintLabel) {\n          ids.push(this._hintLabelId);\n        }\n\n        if (endHint) {\n          ids.push(endHint.id);\n        }\n      } else if (this._errorChildren) {\n        ids = this._errorChildren.map(error => error.id);\n      }\n\n      this._control.setDescribedByIds(ids);\n    }\n  }\n\n  /** Throws an error if the form field's control is missing. */\n  protected _validateControlChild() {\n    if (!this._control) {\n      throw getMatFormFieldMissingControlError();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {MatError} from './error';\nimport {MatFormField} from './form-field';\nimport {MatHint} from './hint';\nimport {MatPlaceholder} from './placeholder';\nimport {MatPrefix} from './prefix';\nimport {MatSuffix} from './suffix';\nimport {MatLabel} from './label';\n\n\n@NgModule({\n  declarations: [\n    MatError,\n    MatHint,\n    MatFormField,\n    MatPlaceholder,\n    MatPrefix,\n    MatSuffix,\n    MatLabel,\n  ],\n  imports: [\n    CommonModule,\n    PlatformModule,\n  ],\n  exports: [\n    MatError,\n    MatHint,\n    MatFormField,\n    MatPlaceholder,\n    MatPrefix,\n    MatSuffix,\n    MatLabel,\n  ],\n})\nexport class MatFormFieldModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport * from './form-field-module';\nexport * from './error';\nexport * from './form-field';\nexport * from './form-field-control';\nexport * from './form-field-errors';\nexport * from './hint';\nexport * from './placeholder';\nexport * from './prefix';\nexport * from './suffix';\nexport * from './label';\nexport * from './form-field-animations';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"]}