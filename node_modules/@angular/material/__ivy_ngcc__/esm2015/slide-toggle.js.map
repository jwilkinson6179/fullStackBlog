{"version":3,"file":"slide-toggle.js","sources":["../../../src/lib/slide-toggle/slide-toggle.ts","../../../src/lib/slide-toggle/slide-toggle-module.ts","../../../src/lib/slide-toggle/public-api.ts","../../../src/lib/slide-toggle/index.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  Output,\n  ViewChild,\n  ViewEncapsulation\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  HammerInput,\n  HasTabIndex,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n  RippleRef,\n} from '@angular/material/core';\n\n// Increasing integer for generating unique ids for slide-toggle components.\nlet nextUniqueId = 0;\n\nexport const MAT_SLIDE_TOGGLE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSlideToggle),\n  multi: true\n};\n\n/** Change event object emitted by a MatSlideToggle. */\nexport class MatSlideToggleChange {\n  constructor(\n    /** The source MatSlideToggle of the event. */\n    public source: MatSlideToggle,\n    /** The new `checked` value of the MatSlideToggle. */\n    public checked: boolean) { }\n}\n\n// Boilerplate for applying mixins to MatSlideToggle.\n/** @docs-private */\nexport class MatSlideToggleBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatSlideToggleMixinBase =\n  mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatSlideToggleBase)), 'accent'));\n\n/** Represents a slidable \"switch\" toggle that can be moved between on and off. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-slide-toggle',\n  exportAs: 'matSlideToggle',\n  host: {\n    'class': 'mat-slide-toggle',\n    '[id]': 'id',\n    '[class.mat-checked]': 'checked',\n    '[class.mat-disabled]': 'disabled',\n    '[class.mat-slide-toggle-label-before]': 'labelPosition == \"before\"',\n  },\n  templateUrl: 'slide-toggle.html',\n  styleUrls: ['slide-toggle.css'],\n  providers: [MAT_SLIDE_TOGGLE_VALUE_ACCESSOR],\n  inputs: ['disabled', 'disableRipple', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatSlideToggle extends _MatSlideToggleMixinBase implements OnDestroy, AfterContentInit,\n    ControlValueAccessor, CanDisable, CanColor, HasTabIndex, CanDisableRipple {\n\n  private onChange = (_: any) => {};\n  private onTouched = () => {};\n\n  private _uniqueId: string = `mat-slide-toggle-${++nextUniqueId}`;\n  private _slideRenderer: SlideToggleRenderer;\n  private _required: boolean = false;\n  private _checked: boolean = false;\n\n  /** Reference to the focus state ripple. */\n  private _focusRipple: RippleRef | null;\n\n  /** Name value will be applied to the input element if present */\n  @Input() name: string | null = null;\n\n  /** A unique id for the slide-toggle input. If none is supplied, it will be auto-generated. */\n  @Input() id: string = this._uniqueId;\n\n  /** Whether the label should appear after or before the slide-toggle. Defaults to 'after' */\n  @Input() labelPosition: 'before' | 'after' = 'after';\n\n  /** Whether the slide-toggle element is checked or not */\n\n  /** Used to set the aria-label attribute on the underlying input element. */\n  @Input('aria-label') ariaLabel: string | null = null;\n\n  /** Used to set the aria-labelledby attribute on the underlying input element. */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  /** Whether the slide-toggle is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value) { this._required = coerceBooleanProperty(value); }\n\n  /** Whether the slide-toggle element is checked or not */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value) {\n    this._checked = coerceBooleanProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  /** An event will be dispatched each time the slide-toggle changes its value. */\n  @Output() readonly change: EventEmitter<MatSlideToggleChange> =\n      new EventEmitter<MatSlideToggleChange>();\n\n  /** Returns the unique id for the visual hidden input. */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Reference to the underlying input element. */\n  @ViewChild('input') _inputElement: ElementRef;\n\n  /** Reference to the ripple directive on the thumb container. */\n  @ViewChild(MatRipple) _ripple: MatRipple;\n\n  constructor(elementRef: ElementRef,\n              private _platform: Platform,\n              private _focusMonitor: FocusMonitor,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Attribute('tabindex') tabIndex: string) {\n\n    super(elementRef);\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterContentInit() {\n    this._slideRenderer = new SlideToggleRenderer(this._elementRef, this._platform);\n\n    this._focusMonitor\n      .monitor(this._inputElement.nativeElement)\n      .subscribe(focusOrigin => this._onInputFocusChange(focusOrigin));\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._inputElement.nativeElement);\n  }\n\n  /** Method being called whenever the underlying input emits a change event. */\n  _onChangeEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the component's `change` output.\n    event.stopPropagation();\n\n    // Releasing the pointer over the `<label>` element while dragging triggers another\n    // click event on the `<label>` element. This means that the checked state of the underlying\n    // input changed unintentionally and needs to be changed back.\n    if (this._slideRenderer.dragging) {\n      this._inputElement.nativeElement.checked = this.checked;\n      return;\n    }\n\n    // Sync the value from the underlying input element with the component instance.\n    this.checked = this._inputElement.nativeElement.checked;\n\n    // Emit our custom change event only if the underlying input emitted one. This ensures that\n    // there is no change event, when the checked state changes programmatically.\n    this._emitChangeEvent();\n  }\n\n  /** Method being called whenever the slide-toggle has been clicked. */\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `slide-toggle` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  writeValue(value: any): void {\n    this.checked = !!value;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnChange(fn: any): void {\n    this.onChange = fn;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnTouched(fn: any): void {\n    this.onTouched = fn;\n  }\n\n  /** Implemented as a part of ControlValueAccessor. */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the slide-toggle. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\n  }\n\n  /** Toggles the checked state of the slide-toggle. */\n  toggle(): void {\n    this.checked = !this.checked;\n  }\n\n  /** Function is called whenever the focus changes for the input element. */\n  private _onInputFocusChange(focusOrigin: FocusOrigin) {\n    if (!this._focusRipple && focusOrigin === 'keyboard') {\n      // For keyboard focus show a persistent ripple as focus indicator.\n      this._focusRipple = this._ripple.launch(0, 0, {persistent: true});\n    } else if (!focusOrigin) {\n      this.onTouched();\n\n      // Fade out and clear the focus ripple if one is currently present.\n      if (this._focusRipple) {\n        this._focusRipple.fadeOut();\n        this._focusRipple = null;\n      }\n    }\n  }\n\n  /**\n   * Emits a change event on the `change` output. Also notifies the FormControl about the change.\n   */\n  private _emitChangeEvent() {\n    this.onChange(this.checked);\n    this.change.emit(new MatSlideToggleChange(this, this.checked));\n  }\n\n  _onDragStart() {\n    if (!this.disabled) {\n      this._slideRenderer.startThumbDrag(this.checked);\n    }\n  }\n\n  _onDrag(event: HammerInput) {\n    if (this._slideRenderer.dragging) {\n      this._slideRenderer.updateThumbPosition(event.deltaX);\n    }\n  }\n\n  _onDragEnd() {\n    if (this._slideRenderer.dragging) {\n      const newCheckedValue = this._slideRenderer.dragPercentage > 50;\n\n      if (newCheckedValue !== this.checked) {\n        this.checked = newCheckedValue;\n        this._emitChangeEvent();\n      }\n\n      // The drag should be stopped outside of the current event handler, because otherwise the\n      // click event will be fired before and will revert the drag change.\n      setTimeout(() => this._slideRenderer.stopThumbDrag());\n    }\n  }\n\n  /** Method being called whenever the label text changes. */\n  _onLabelTextChange() {\n    // This method is getting called whenever the label of the slide-toggle changes.\n    // Since the slide-toggle uses the OnPush strategy we need to notify it about the change\n    // that has been recognized by the cdkObserveContent directive.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n\n/**\n * Renderer for the Slide Toggle component, which separates DOM modification in its own class\n */\nclass SlideToggleRenderer {\n\n  /** Reference to the thumb HTMLElement. */\n  private _thumbEl: HTMLElement;\n\n  /** Reference to the thumb bar HTMLElement. */\n  private _thumbBarEl: HTMLElement;\n\n  /** Width of the thumb bar of the slide-toggle. */\n  private _thumbBarWidth: number;\n\n  /** Previous checked state before drag started. */\n  private _previousChecked: boolean;\n\n  /** Percentage of the thumb while dragging. Percentage as fraction of 100. */\n  dragPercentage: number;\n\n  /** Whether the thumb is currently being dragged. */\n  dragging: boolean = false;\n\n  constructor(elementRef: ElementRef, platform: Platform) {\n    // We only need to interact with these elements when we're on the browser, so only grab\n    // the reference in that case.\n    if (platform.isBrowser) {\n      this._thumbEl = elementRef.nativeElement.querySelector('.mat-slide-toggle-thumb-container');\n      this._thumbBarEl = elementRef.nativeElement.querySelector('.mat-slide-toggle-bar');\n    }\n  }\n\n  /** Initializes the drag of the slide-toggle. */\n  startThumbDrag(checked: boolean): void {\n    if (this.dragging) { return; }\n\n    this._thumbBarWidth = this._thumbBarEl.clientWidth - this._thumbEl.clientWidth;\n    this._thumbEl.classList.add('mat-dragging');\n\n    this._previousChecked = checked;\n    this.dragging = true;\n  }\n\n  /** Resets the current drag and returns the new checked value. */\n  stopThumbDrag(): boolean {\n    if (!this.dragging) { return false; }\n\n    this.dragging = false;\n    this._thumbEl.classList.remove('mat-dragging');\n\n    // Reset the transform because the component will take care of the thumb position after drag.\n    this._thumbEl.style.transform = '';\n\n    return this.dragPercentage > 50;\n  }\n\n  /** Updates the thumb containers position from the specified distance. */\n  updateThumbPosition(distance: number): void {\n    this.dragPercentage = this._getDragPercentage(distance);\n    // Calculate the moved distance based on the thumb bar width.\n    const dragX = (this.dragPercentage / 100) * this._thumbBarWidth;\n    this._thumbEl.style.transform = `translate3d(${dragX}px, 0, 0)`;\n  }\n\n  /** Retrieves the percentage of thumb from the moved distance. Percentage as fraction of 100. */\n  private _getDragPercentage(distance: number) {\n    let percentage = (distance / this._thumbBarWidth) * 100;\n\n    // When the toggle was initially checked, then we have to start the drag at the end.\n    if (this._previousChecked) {\n      percentage += 100;\n    }\n\n    return Math.max(0, Math.min(percentage, 100));\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {NgModule} from '@angular/core';\nimport {\n  GestureConfig,\n  MatCommonModule,\n  MatRippleModule,\n} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {MatSlideToggle} from './slide-toggle';\n\n\n@NgModule({\n  imports: [MatRippleModule, MatCommonModule, PlatformModule, ObserversModule, A11yModule],\n  exports: [MatSlideToggle, MatCommonModule],\n  declarations: [MatSlideToggle],\n  providers: [\n    {provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}\n  ],\n})\nexport class MatSlideToggleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport * from './slide-toggle-module';\nexport * from './slide-toggle';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"]}