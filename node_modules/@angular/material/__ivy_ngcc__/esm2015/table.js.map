{"version":3,"file":"table.js","sources":["../../../src/lib/table/table.ts","../../../src/lib/table/cell.ts","../../../src/lib/table/row.ts","../../../src/lib/table/table-module.ts","../../../src/lib/table/table-data-source.ts","../../../src/lib/table/public-api.ts","../../../src/lib/table/index.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, ViewEncapsulation} from '@angular/core';\nimport {CDK_TABLE_TEMPLATE, CdkTable} from '@angular/cdk/table';\n\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-table',\n  exportAs: 'matTable',\n  template: CDK_TABLE_TEMPLATE,\n  styleUrls: ['table.css'],\n  host: {\n    'class': 'mat-table',\n  },\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatTable<T> extends CdkTable<T> { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, Input} from '@angular/core';\nimport {\n  CdkCell,\n  CdkCellDef,\n  CdkColumnDef,\n  CdkHeaderCell,\n  CdkHeaderCellDef,\n} from '@angular/cdk/table';\n\n/**\n * Cell definition for the mat-table.\n * Captures the template of a column's data row cell as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matCellDef]',\n  providers: [{provide: CdkCellDef, useExisting: MatCellDef}]\n})\nexport class MatCellDef extends CdkCellDef { }\n\n/**\n * Header cell definition for the mat-table.\n * Captures the template of a column's header cell and as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matHeaderCellDef]',\n  providers: [{provide: CdkHeaderCellDef, useExisting: MatHeaderCellDef}]\n})\nexport class MatHeaderCellDef extends CdkHeaderCellDef { }\n\n/**\n * Column definition for the mat-table.\n * Defines a set of cells available for a table column.\n */\n@Directive({\n  selector: '[matColumnDef]',\n  providers: [{provide: CdkColumnDef, useExisting: MatColumnDef}],\n})\nexport class MatColumnDef extends CdkColumnDef {\n  /** Unique name for this column. */\n  @Input('matColumnDef') name: string;\n}\n\n/** Header cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-header-cell',\n  host: {\n    'class': 'mat-header-cell',\n    'role': 'columnheader',\n  },\n})\nexport class MatHeaderCell extends CdkHeaderCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n\n/** Cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-cell',\n  host: {\n    'class': 'mat-cell',\n    'role': 'gridcell',\n  },\n})\nexport class MatCell extends CdkCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, Directive, ViewEncapsulation} from '@angular/core';\nimport {\n  CDK_ROW_TEMPLATE,\n  CdkHeaderRow,\n  CdkHeaderRowDef,\n  CdkRow,\n  CdkRowDef,\n} from '@angular/cdk/table';\n\n/**\n * Header row definition for the mat-table.\n * Captures the header row's template and other header properties such as the columns to display.\n */\n@Directive({\n  selector: '[matHeaderRowDef]',\n  providers: [{provide: CdkHeaderRowDef, useExisting: MatHeaderRowDef}],\n  inputs: ['columns: matHeaderRowDef'],\n})\nexport class MatHeaderRowDef extends CdkHeaderRowDef { }\n\n/**\n * Data row definition for the mat-table.\n * Captures the header row's template and other row properties such as the columns to display and\n * a when predicate that describes when this row should be used.\n */\n@Directive({\n  selector: '[matRowDef]',\n  providers: [{provide: CdkRowDef, useExisting: MatRowDef}],\n  inputs: ['columns: matRowDefColumns', 'when: matRowDefWhen'],\n})\nexport class MatRowDef<T> extends CdkRowDef<T> {\n}\n\n/** Header template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-header-row',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-header-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matHeaderRow',\n  preserveWhitespaces: false,\n})\nexport class MatHeaderRow extends CdkHeaderRow { }\n\n/** Data row template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-row',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matRow',\n  preserveWhitespaces: false,\n})\nexport class MatRow extends CdkRow { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatTable} from './table';\nimport {CdkTableModule} from '@angular/cdk/table';\nimport {MatCell, MatCellDef, MatColumnDef, MatHeaderCell, MatHeaderCellDef} from './cell';\nimport {MatHeaderRow, MatHeaderRowDef, MatRow, MatRowDef} from './row';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\n\n@NgModule({\n  imports: [CdkTableModule, CommonModule, MatCommonModule],\n  exports: [MatTable, MatCellDef, MatHeaderCellDef, MatColumnDef,\n    MatHeaderCell, MatCell, MatHeaderRow, MatRow,\n    MatHeaderRowDef, MatRowDef],\n  declarations: [MatTable, MatCellDef, MatHeaderCellDef, MatColumnDef,\n    MatHeaderCell, MatCell, MatHeaderRow, MatRow,\n    MatHeaderRowDef, MatRowDef],\n})\nexport class MatTableModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DataSource} from '@angular/cdk/table';\nimport {BehaviorSubject} from 'rxjs/BehaviorSubject';\nimport {MatPaginator} from '@angular/material/paginator';\nimport {MatSort} from '@angular/material/sort';\nimport {Subscription} from 'rxjs/Subscription';\nimport {combineLatest} from 'rxjs/operators/combineLatest';\nimport {map} from 'rxjs/operators/map';\nimport {startWith} from 'rxjs/operators/startWith';\nimport {empty} from 'rxjs/observable/empty';\nimport {_isNumberValue} from '@angular/cdk/coercion';\n\n/**\n * Data source that accepts a client-side data array and includes native support of filtering,\n * sorting (using MatSort), and pagination (using MatPaginator).\n *\n * Allows for sort customization by overriding sortingDataAccessor, which defines how data\n * properties are accessed. Also allows for filter customization by overriding filterTermAccessor,\n * which defines how row data is converted to a string for filter matching.\n */\nexport class MatTableDataSource<T> extends DataSource<T> {\n  /** Stream that emits when a new data array is set on the data source. */\n  private readonly _data: BehaviorSubject<T[]>;\n\n  /** Stream emitting render data to the table (depends on ordered data changes). */\n  private readonly _renderData = new BehaviorSubject<T[]>([]);\n\n  /** Stream that emits when a new filter string is set on the data source. */\n  private readonly _filter = new BehaviorSubject<string>('');\n\n  /**\n   * Subscription to the changes that should trigger an update to the table's rendered rows, such\n   * as filtering, sorting, pagination, or base data changes.\n   */\n  _renderChangesSubscription: Subscription;\n\n  /**\n   * The filtered set of data that has been matched by the filter string, or all the data if there\n   * is no filter. Useful for knowing the set of data the table represents.\n   * For example, a 'selectAll()' function would likely want to select the set of filtered data\n   * shown to the user rather than all the data.\n   */\n  filteredData: T[];\n\n  /** Array of data that should be rendered by the table, where each object represents one row. */\n  get data() { return this._data.value; }\n  set data(data: T[]) { this._data.next(data); }\n\n  /**\n   * Filter term that should be used to filter out objects from the data array. To override how\n   * data objects match to this filter string, provide a custom function for filterPredicate.\n   */\n  get filter(): string { return this._filter.value; }\n  set filter(filter: string) { this._filter.next(filter); }\n\n  /**\n   * Instance of the MatSort directive used by the table to control its sorting. Sort changes\n   * emitted by the MatSort will trigger an update to the table's rendered data.\n   */\n  get sort(): MatSort | null { return this._sort; }\n  set sort(sort: MatSort|null) {\n    this._sort = sort;\n    this._updateChangeSubscription();\n  }\n  private _sort: MatSort|null;\n\n  /**\n   * Instance of the MatPaginator component used by the table to control what page of the data is\n   * displayed. Page changes emitted by the MatPaginator will trigger an update to the\n   * table's rendered data.\n   *\n   * Note that the data source uses the paginator's properties to calculate which page of data\n   * should be displayed. If the paginator receives its properties as template inputs,\n   * e.g. `[pageLength]=100` or `[pageIndex]=1`, then be sure that the paginator's view has been\n   * initialized before assigning it to this data source.\n   */\n  get paginator(): MatPaginator | null { return this._paginator; }\n  set paginator(paginator: MatPaginator|null) {\n    this._paginator = paginator;\n    this._updateChangeSubscription();\n  }\n  private _paginator: MatPaginator|null;\n\n  /**\n   * Data accessor function that is used for accessing data properties for sorting through\n   * the default sortData function.\n   * This default function assumes that the sort header IDs (which defaults to the column name)\n   * matches the data's properties (e.g. column Xyz represents data['Xyz']).\n   * May be set to a custom function for different behavior.\n   * @param data Data object that is being accessed.\n   * @param sortHeaderId The name of the column that represents the data.\n   */\n  sortingDataAccessor: ((data: T, sortHeaderId: string) => string|number) =\n      (data: T, sortHeaderId: string): string|number => {\n    const value: any = data[sortHeaderId];\n    return _isNumberValue(value) ? Number(value) : value;\n  }\n\n  /**\n   * Gets a sorted copy of the data array based on the state of the MatSort. Called\n   * after changes are made to the filtered data or when sort changes are emitted from MatSort.\n   * By default, the function retrieves the active sort and its direction and compares data\n   * by retrieving data using the sortingDataAccessor. May be overridden for a custom implementation\n   * of data ordering.\n   * @param data The array of data that should be sorted.\n   * @param sort The connected MatSort that holds the current sort state.\n   */\n  sortData: ((data: T[], sort: MatSort) => T[]) = (data: T[], sort: MatSort): T[] => {\n    const active = sort.active;\n    const direction = sort.direction;\n    if (!active || direction == '') { return data; }\n\n    return data.sort((a, b) => {\n      let valueA = this.sortingDataAccessor(a, active);\n      let valueB = this.sortingDataAccessor(b, active);\n\n      // If both valueA and valueB exist (truthy), then compare the two. Otherwise, check if\n      // one value exists while the other doesn't. In this case, existing value should come first.\n      // This avoids inconsistent results when comparing values to undefined/null.\n      // If neither value exists, return 0 (equal).\n      let comparatorResult = 0;\n      if (valueA && valueB) {\n        // Check if one value is greater than the other; if equal, comparatorResult should remain 0.\n        if (valueA > valueB) {\n          comparatorResult = 1;\n        } else if (valueA < valueB) {\n          comparatorResult = -1;\n        }\n      } else if (valueA) {\n        comparatorResult = 1;\n      } else if (valueB) {\n        comparatorResult = -1;\n      }\n\n      return comparatorResult * (direction == 'asc' ? 1 : -1);\n    });\n  }\n\n  /**\n   * Checks if a data object matches the data source's filter string. By default, each data object\n   * is converted to a string of its properties and returns true if the filter has\n   * at least one occurrence in that string. By default, the filter string has its whitespace\n   * trimmed and the match is case-insensitive. May be overridden for a custom implementation of\n   * filter matching.\n   * @param data Data object used to check against the filter.\n   * @param filter Filter string that has been set on the data source.\n   * @returns Whether the filter matches against the data\n   */\n  filterPredicate: ((data: T, filter: string) => boolean) = (data: T, filter: string): boolean => {\n    // Transform the data into a lowercase string of all property values.\n    const accumulator = (currentTerm, key) => currentTerm + data[key];\n    const dataStr = Object.keys(data).reduce(accumulator, '').toLowerCase();\n\n    // Transform the filter by converting it to lowercase and removing whitespace.\n    const transformedFilter = filter.trim().toLowerCase();\n\n    return dataStr.indexOf(transformedFilter) != -1;\n  }\n\n  constructor(initialData: T[] = []) {\n    super();\n    this._data = new BehaviorSubject<T[]>(initialData);\n    this._updateChangeSubscription();\n  }\n\n  /**\n   * Subscribe to changes that should trigger an update to the table's rendered rows. When the\n   * changes occur, process the current state of the filter, sort, and pagination along with\n   * the provided base data and send it to the table for rendering.\n   */\n  _updateChangeSubscription() {\n    // Sorting and/or pagination should be watched if MatSort and/or MatPaginator are provided.\n    // Otherwise, use an empty observable stream to take their place.\n    const sortChange = this._sort ? this._sort.sortChange : empty();\n    const pageChange = this._paginator ? this._paginator.page : empty();\n\n    if (this._renderChangesSubscription) {\n      this._renderChangesSubscription.unsubscribe();\n    }\n\n    // Watch for base data or filter changes to provide a filtered set of data.\n    this._renderChangesSubscription = this._data.pipe(\n      combineLatest(this._filter),\n      map(([data]) => this._filterData(data)),\n      // Watch for filtered data or sort changes to provide an ordered set of data.\n      combineLatest(sortChange.pipe(startWith(null!))),\n      map(([data]) => this._orderData(data)),\n      // Watch for ordered data or page changes to provide a paged set of data.\n      combineLatest(pageChange.pipe(startWith(null!))),\n      map(([data]) => this._pageData(data))\n    )\n    // Watched for paged data changes and send the result to the table to render.\n    .subscribe(data => this._renderData.next(data));\n  }\n\n  /**\n   * Returns a filtered data array where each filter object contains the filter string within\n   * the result of the filterTermAccessor function. If no filter is set, returns the data array\n   * as provided.\n   */\n  _filterData(data: T[]) {\n    // If there is a filter string, filter out data that does not contain it.\n    // Each data object is converted to a string using the function defined by filterTermAccessor.\n    // May be overridden for customization.\n    this.filteredData =\n        !this.filter ? data : data.filter(obj => this.filterPredicate(obj, this.filter));\n\n    if (this.paginator) { this._updatePaginator(this.filteredData.length); }\n\n    return this.filteredData;\n  }\n\n  /**\n   * Returns a sorted copy of the data if MatSort has a sort applied, otherwise just returns the\n   * data array as provided. Uses the default data accessor for data lookup, unless a\n   * sortDataAccessor function is defined.\n   */\n  _orderData(data: T[]): T[] {\n    // If there is no active sort or direction, return the data without trying to sort.\n    if (!this.sort) { return data; }\n\n    return this.sortData(data.slice(), this.sort);\n  }\n\n  /**\n   * Returns a paged splice of the provided data array according to the provided MatPaginator's page\n   * index and length. If there is no paginator provided, returns the data array as provided.\n   */\n  _pageData(data: T[]): T[] {\n    if (!this.paginator) { return data; }\n\n    const startIndex = this.paginator.pageIndex * this.paginator.pageSize;\n    return data.slice().splice(startIndex, this.paginator.pageSize);\n  }\n\n  /**\n   * Updates the paginator to reflect the length of the filtered data, and makes sure that the page\n   * index does not exceed the paginator's last page. Values are changed in a resolved promise to\n   * guard against making property changes within a round of change detection.\n   */\n  _updatePaginator(filteredDataLength: number) {\n    Promise.resolve().then(() => {\n      if (!this.paginator) { return; }\n\n      this.paginator.length = filteredDataLength;\n\n      // If the page index is set beyond the page, reduce it to the last page.\n      if (this.paginator.pageIndex > 0) {\n        const lastPageIndex = Math.ceil(this.paginator.length / this.paginator.pageSize) - 1 || 0;\n        this.paginator.pageIndex = Math.min(this.paginator.pageIndex, lastPageIndex);\n      }\n    });\n  }\n\n  /**\n   * Used by the MatTable. Called when it connects to the data source.\n   * @docs-private\n   */\n  connect() { return this._renderData; }\n\n  /**\n   * Used by the MatTable. Called when it is destroyed. No-op.\n   * @docs-private\n   */\n  disconnect() { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport * from './table-module';\nexport * from './cell';\nexport * from './table';\nexport * from './row';\nexport * from './table-data-source';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"]}