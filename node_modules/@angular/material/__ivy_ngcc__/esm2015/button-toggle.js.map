{"version":3,"file":"button-toggle.js","sources":["../../../src/lib/button-toggle/button-toggle.ts","../../../src/lib/button-toggle/button-toggle-module.ts","../../../src/lib/button-toggle/public-api.ts","../../../src/lib/button-toggle/index.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\n\n/** Acceptable types for a button toggle. */\nexport type ToggleType = 'checkbox' | 'radio';\n\n// Boilerplate for applying mixins to MatButtonToggleGroup and MatButtonToggleGroupMultiple\n/** @docs-private */\nexport class MatButtonToggleGroupBase {}\nexport const _MatButtonToggleGroupMixinBase = mixinDisabled(MatButtonToggleGroupBase);\n\n/**\n * Provider Expression that allows mat-button-toggle-group to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatButtonToggleGroup),\n  multi: true\n};\n\nlet _uniqueIdCounter = 0;\n\n/** Change event object emitted by MatButtonToggle. */\nexport class MatButtonToggleChange {\n  /** The MatButtonToggle that emits the event. */\n  source: MatButtonToggle | null;\n  /** The value assigned to the MatButtonToggle. */\n  value: any;\n}\n\n/** Exclusive selection button toggle group that behaves like a radio-button group. */\n@Directive({\n  selector: 'mat-button-toggle-group:not([multiple])',\n  providers: [MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR],\n  inputs: ['disabled'],\n  host: {\n    'role': 'radiogroup',\n    'class': 'mat-button-toggle-group',\n    '[class.mat-button-toggle-vertical]': 'vertical'\n  },\n  exportAs: 'matButtonToggleGroup',\n})\nexport class MatButtonToggleGroup extends _MatButtonToggleGroupMixinBase\n    implements ControlValueAccessor, CanDisable {\n  /**\n   * The method to be called in order to update ngModel.\n   * Now `ngModel` binding is not supported in multiple selection mode.\n   */\n  _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n  _onTouched: () => any = () => {};\n\n  /** Child button toggle buttons. */\n  @ContentChildren(forwardRef(() => MatButtonToggle)) _buttonToggles: QueryList<MatButtonToggle>;\n\n  /** `name` attribute for the underlying `input` element. */\n  @Input()\n  get name(): string { return this._name; }\n  set name(value: string) {\n    this._name = value;\n    this._updateButtonToggleNames();\n  }\n  private _name: string = `mat-button-toggle-group-${_uniqueIdCounter++}`;\n\n  /** Whether the toggle group is vertical. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) { this._vertical = coerceBooleanProperty(value); }\n  private _vertical: boolean = false;\n\n  /** Value of the toggle group. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(value: any) {\n    if (this._value != value) {\n      this._value = value;\n      this.valueChange.emit(value);\n      this._updateSelectedButtonToggleFromValue();\n    }\n  }\n  private _value: any = null;\n\n  /**\n   * Event that emits whenever the value of the group changes.\n   * Used to facilitate two-way data binding.\n   * @docs-private\n   */\n  @Output() readonly valueChange = new EventEmitter<any>();\n\n  /** The currently selected button toggle, should match the value. */\n  @Input()\n  get selected(): MatButtonToggle | null { return this._selected; }\n  set selected(selected: MatButtonToggle | null) {\n    this._selected = selected;\n    this.value = selected ? selected.value : null;\n\n    if (selected && !selected.checked) {\n      selected.checked = true;\n    }\n  }\n  private _selected: MatButtonToggle | null = null;\n\n  /** Event emitted when the group's value changes. */\n  @Output() readonly change: EventEmitter<MatButtonToggleChange> =\n      new EventEmitter<MatButtonToggleChange>();\n\n  constructor(private _changeDetector: ChangeDetectorRef) {\n    super();\n  }\n\n  private _updateButtonToggleNames(): void {\n    if (this._buttonToggles) {\n      this._buttonToggles.forEach((toggle) => {\n        toggle.name = this._name;\n      });\n    }\n  }\n\n  // TODO: Refactor into shared code with radio.\n  private _updateSelectedButtonToggleFromValue(): void {\n    let isAlreadySelected = this._selected != null && this._selected.value == this._value;\n\n    if (this._buttonToggles != null && !isAlreadySelected) {\n      let matchingButtonToggle = this._buttonToggles.filter(\n          buttonToggle => buttonToggle.value == this._value)[0];\n\n      if (matchingButtonToggle) {\n        this.selected = matchingButtonToggle;\n      } else if (this.value == null) {\n        this.selected = null;\n        this._buttonToggles.forEach(buttonToggle => {\n          buttonToggle.checked = false;\n        });\n      }\n    }\n  }\n\n  /** Dispatch change event with current selection and group value. */\n  _emitChangeEvent(): void {\n    let event = new MatButtonToggleChange();\n    event.source = this._selected;\n    event.value = this._value;\n    this._controlValueAccessorChangeFn(event.value);\n    this.change.emit(event);\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any) {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: any) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._markButtonTogglesForCheck();\n  }\n\n  private _markButtonTogglesForCheck() {\n    if (this._buttonToggles) {\n      this._buttonToggles.forEach((toggle) => toggle._markForCheck());\n    }\n  }\n}\n\n/** Multiple selection button-toggle group. `ngModel` is not supported in this mode. */\n@Directive({\n  selector: 'mat-button-toggle-group[multiple]',\n  exportAs: 'matButtonToggleGroup',\n  inputs: ['disabled'],\n  host: {\n    'class': 'mat-button-toggle-group',\n    '[class.mat-button-toggle-vertical]': 'vertical',\n    'role': 'group'\n  }\n})\nexport class MatButtonToggleGroupMultiple extends _MatButtonToggleGroupMixinBase\n    implements CanDisable {\n  /** Whether the toggle group is vertical. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) { this._vertical = coerceBooleanProperty(value); }\n  private _vertical: boolean = false;\n}\n\n/** Single button inside of a toggle group. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-button-toggle',\n  templateUrl: 'button-toggle.html',\n  styleUrls: ['button-toggle.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  exportAs: 'matButtonToggle',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    '[class.mat-button-toggle-standalone]': '!buttonToggleGroup && !buttonToggleGroupMultiple',\n    '[class.mat-button-toggle-checked]': 'checked',\n    '[class.mat-button-toggle-disabled]': 'disabled',\n    'class': 'mat-button-toggle',\n    '[attr.id]': 'id',\n  }\n})\nexport class MatButtonToggle implements OnInit, OnDestroy {\n  /**\n   * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n   * take precedence so this may be omitted.\n   */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /**\n   * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n   */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  /** Type of the button toggle. Either 'radio' or 'checkbox'. */\n  _type: ToggleType;\n\n  /** Whether or not the button toggle is a single selection. */\n  private _isSingleSelector: boolean = false;\n\n  /** Unregister function for _buttonToggleDispatcher */\n  private _removeUniqueSelectionListener: () => void = () => {};\n\n  @ViewChild('input') _inputElement: ElementRef;\n\n  /** The parent button toggle group (exclusive selection). Optional. */\n  buttonToggleGroup: MatButtonToggleGroup;\n\n  /** The parent button toggle group (multiple selection). Optional. */\n  buttonToggleGroupMultiple: MatButtonToggleGroupMultiple;\n\n  /** Unique ID for the underlying `input` element. */\n  get inputId(): string { return `${this.id}-input`; }\n\n  /** The unique ID for this button toggle. */\n  @Input() id: string;\n\n  /** HTML's 'name' attribute used to group radios for unique selection. */\n  @Input() name: string;\n\n  /** Whether the button is checked. */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value: boolean) {\n    if (this._isSingleSelector && value) {\n      // Notify all button toggles with the same name (in the same group) to un-check.\n      this._buttonToggleDispatcher.notify(this.id, this.name);\n      this._changeDetectorRef.markForCheck();\n    }\n\n    this._checked = value;\n\n    if (value && this._isSingleSelector && this.buttonToggleGroup.value != this.value) {\n      this.buttonToggleGroup.selected = this;\n    }\n  }\n  private _checked: boolean = false;\n\n  /** MatButtonToggleGroup reads this to assign its own value. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(value: any) {\n    if (this._value != value) {\n      if (this.buttonToggleGroup != null && this.checked) {\n        this.buttonToggleGroup.value = value;\n      }\n      this._value = value;\n    }\n  }\n  private _value: any = null;\n\n  /** Whether the button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled || (this.buttonToggleGroup != null && this.buttonToggleGroup.disabled) ||\n        (this.buttonToggleGroupMultiple != null && this.buttonToggleGroupMultiple.disabled);\n  }\n  set disabled(value: boolean) { this._disabled = coerceBooleanProperty(value); }\n  private _disabled: boolean = false;\n\n  /** Event emitted when the group value changes. */\n  @Output() readonly change: EventEmitter<MatButtonToggleChange> =\n      new EventEmitter<MatButtonToggleChange>();\n\n  constructor(@Optional() toggleGroup: MatButtonToggleGroup,\n              @Optional() toggleGroupMultiple: MatButtonToggleGroupMultiple,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _buttonToggleDispatcher: UniqueSelectionDispatcher,\n              private _elementRef: ElementRef,\n              private _focusMonitor: FocusMonitor) {\n\n    this.buttonToggleGroup = toggleGroup;\n    this.buttonToggleGroupMultiple = toggleGroupMultiple;\n\n    if (this.buttonToggleGroup) {\n      this._removeUniqueSelectionListener =\n        _buttonToggleDispatcher.listen((id: string, name: string) => {\n          if (id != this.id && name == this.name) {\n            this.checked = false;\n            this._changeDetectorRef.markForCheck();\n          }\n        });\n\n      this._type = 'radio';\n      this.name = this.buttonToggleGroup.name;\n      this._isSingleSelector = true;\n    } else {\n      // Even if there is no group at all, treat the button toggle as a checkbox so it can be\n      // toggled on or off.\n      this._type = 'checkbox';\n      this._isSingleSelector = false;\n    }\n  }\n\n  ngOnInit() {\n    if (this.id == null) {\n      this.id = `mat-button-toggle-${_uniqueIdCounter++}`;\n    }\n\n    if (this.buttonToggleGroup && this._value == this.buttonToggleGroup.value) {\n      this._checked = true;\n    }\n    this._focusMonitor.monitor(this._elementRef.nativeElement, true);\n  }\n\n  /** Focuses the button. */\n  focus(): void {\n    this._inputElement.nativeElement.focus();\n  }\n\n  /** Toggle the state of the current button toggle. */\n  private _toggle(): void {\n    this.checked = !this.checked;\n  }\n\n  /** Checks the button toggle due to an interaction with the underlying native input. */\n  _onInputChange(event: Event) {\n    event.stopPropagation();\n\n    if (this._isSingleSelector) {\n      // Propagate the change one-way via the group, which will in turn mark this\n      // button toggle as checked.\n      let groupValueChanged = this.buttonToggleGroup.selected != this;\n      this.checked = true;\n      this.buttonToggleGroup.selected = this;\n      this.buttonToggleGroup._onTouched();\n      if (groupValueChanged) {\n        this.buttonToggleGroup._emitChangeEvent();\n      }\n    } else {\n      this._toggle();\n    }\n\n    // Emit a change event when the native input does.\n    this._emitChangeEvent();\n  }\n\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `slide-toggle` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /** Dispatch change event with current value. */\n  private _emitChangeEvent(): void {\n    let event = new MatButtonToggleChange();\n    event.source = this;\n    event.value = this._value;\n    this.change.emit(event);\n  }\n\n  // Unregister buttonToggleDispatcherListener on destroy\n  ngOnDestroy() {\n    this._removeUniqueSelectionListener();\n  }\n\n  /**\n   * Marks the button toggle as needing checking for change detection.\n   * This method is exposed because the parent button toggle group will directly\n   * update bound properties of the radio button.\n   */\n  _markForCheck() {\n    // When group value changes, the button will not be notified. Use `markForCheck` to explicit\n    // update button toggle's status\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatButtonToggleGroup, MatButtonToggleGroupMultiple, MatButtonToggle} from './button-toggle';\nimport {MatCommonModule} from '@angular/material/core';\nimport {UNIQUE_SELECTION_DISPATCHER_PROVIDER} from '@angular/cdk/collections';\nimport {A11yModule} from '@angular/cdk/a11y';\n\n\n@NgModule({\n  imports: [MatCommonModule, A11yModule],\n  exports: [\n    MatButtonToggleGroup,\n    MatButtonToggleGroupMultiple,\n    MatButtonToggle,\n    MatCommonModule,\n  ],\n  declarations: [MatButtonToggleGroup, MatButtonToggleGroupMultiple, MatButtonToggle],\n  providers: [UNIQUE_SELECTION_DISPATCHER_PROVIDER]\n})\nexport class MatButtonToggleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport * from './button-toggle';\nexport * from './button-toggle-module';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"]}