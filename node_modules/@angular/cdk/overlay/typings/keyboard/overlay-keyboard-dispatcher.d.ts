/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
import { InjectionToken, Optional, OnDestroy } from '@angular/core';
import { OverlayRef } from '../overlay-ref';
/**
 * Service for dispatching keyboard events that land on the body to appropriate overlay ref,
 * if any. It maintains a list of attached overlays to determine best suited overlay based
 * on event target and order of overlay opens.
 */
import * as ɵngcc0 from '@angular/core';
export declare class OverlayKeyboardDispatcher implements OnDestroy {
    private _document;
    /** Currently attached overlays in the order they were attached. */
    _attachedOverlays: OverlayRef[];
    private _keydownEventSubscription;
    constructor(_document: any);
    ngOnDestroy(): void;
    /** Add a new overlay to the list of attached overlay refs. */
    add(overlayRef: OverlayRef): void;
    /** Remove an overlay from the list of attached overlay refs. */
    remove(overlayRef: OverlayRef): void;
    /**
     * Subscribe to keydown events that land on the body and dispatch those
     * events to the appropriate overlay.
     */
    private _subscribeToKeydownEvents();
    /** Removes the global keydown subscription. */
    private _unsubscribeFromKeydownEvents();
    /** Select the appropriate overlay from a keydown event. */
    private _selectOverlayFromEvent(event);
    static ɵfac: ɵngcc0.ɵɵFactoryDef<OverlayKeyboardDispatcher, never>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<OverlayKeyboardDispatcher>;
}
/** @docs-private */
export declare function OVERLAY_KEYBOARD_DISPATCHER_PROVIDER_FACTORY(dispatcher: OverlayKeyboardDispatcher, _document: any): OverlayKeyboardDispatcher;
/** @docs-private */
export declare const OVERLAY_KEYBOARD_DISPATCHER_PROVIDER: {
    provide: typeof OverlayKeyboardDispatcher;
    deps: (Optional[] | InjectionToken<any>)[];
    useFactory: (dispatcher: OverlayKeyboardDispatcher, _document: any) => OverlayKeyboardDispatcher;
};

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib3ZlcmxheS1rZXlib2FyZC1kaXNwYXRjaGVyLmQudHMiLCJzb3VyY2VzIjpbIm92ZXJsYXkta2V5Ym9hcmQtZGlzcGF0Y2hlci5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBMTEMgQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG5pbXBvcnQgeyBJbmplY3Rpb25Ub2tlbiwgT3B0aW9uYWwsIE9uRGVzdHJveSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgT3ZlcmxheVJlZiB9IGZyb20gJy4uL292ZXJsYXktcmVmJztcbi8qKlxuICogU2VydmljZSBmb3IgZGlzcGF0Y2hpbmcga2V5Ym9hcmQgZXZlbnRzIHRoYXQgbGFuZCBvbiB0aGUgYm9keSB0byBhcHByb3ByaWF0ZSBvdmVybGF5IHJlZixcbiAqIGlmIGFueS4gSXQgbWFpbnRhaW5zIGEgbGlzdCBvZiBhdHRhY2hlZCBvdmVybGF5cyB0byBkZXRlcm1pbmUgYmVzdCBzdWl0ZWQgb3ZlcmxheSBiYXNlZFxuICogb24gZXZlbnQgdGFyZ2V0IGFuZCBvcmRlciBvZiBvdmVybGF5IG9wZW5zLlxuICovXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBPdmVybGF5S2V5Ym9hcmREaXNwYXRjaGVyIGltcGxlbWVudHMgT25EZXN0cm95IHtcbiAgICBwcml2YXRlIF9kb2N1bWVudDtcbiAgICAvKiogQ3VycmVudGx5IGF0dGFjaGVkIG92ZXJsYXlzIGluIHRoZSBvcmRlciB0aGV5IHdlcmUgYXR0YWNoZWQuICovXG4gICAgX2F0dGFjaGVkT3ZlcmxheXM6IE92ZXJsYXlSZWZbXTtcbiAgICBwcml2YXRlIF9rZXlkb3duRXZlbnRTdWJzY3JpcHRpb247XG4gICAgY29uc3RydWN0b3IoX2RvY3VtZW50OiBhbnkpO1xuICAgIG5nT25EZXN0cm95KCk6IHZvaWQ7XG4gICAgLyoqIEFkZCBhIG5ldyBvdmVybGF5IHRvIHRoZSBsaXN0IG9mIGF0dGFjaGVkIG92ZXJsYXkgcmVmcy4gKi9cbiAgICBhZGQob3ZlcmxheVJlZjogT3ZlcmxheVJlZik6IHZvaWQ7XG4gICAgLyoqIFJlbW92ZSBhbiBvdmVybGF5IGZyb20gdGhlIGxpc3Qgb2YgYXR0YWNoZWQgb3ZlcmxheSByZWZzLiAqL1xuICAgIHJlbW92ZShvdmVybGF5UmVmOiBPdmVybGF5UmVmKTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBTdWJzY3JpYmUgdG8ga2V5ZG93biBldmVudHMgdGhhdCBsYW5kIG9uIHRoZSBib2R5IGFuZCBkaXNwYXRjaCB0aG9zZVxuICAgICAqIGV2ZW50cyB0byB0aGUgYXBwcm9wcmlhdGUgb3ZlcmxheS5cbiAgICAgKi9cbiAgICBwcml2YXRlIF9zdWJzY3JpYmVUb0tleWRvd25FdmVudHMoKTtcbiAgICAvKiogUmVtb3ZlcyB0aGUgZ2xvYmFsIGtleWRvd24gc3Vic2NyaXB0aW9uLiAqL1xuICAgIHByaXZhdGUgX3Vuc3Vic2NyaWJlRnJvbUtleWRvd25FdmVudHMoKTtcbiAgICAvKiogU2VsZWN0IHRoZSBhcHByb3ByaWF0ZSBvdmVybGF5IGZyb20gYSBrZXlkb3duIGV2ZW50LiAqL1xuICAgIHByaXZhdGUgX3NlbGVjdE92ZXJsYXlGcm9tRXZlbnQoZXZlbnQpO1xufVxuLyoqIEBkb2NzLXByaXZhdGUgKi9cbmV4cG9ydCBkZWNsYXJlIGZ1bmN0aW9uIE9WRVJMQVlfS0VZQk9BUkRfRElTUEFUQ0hFUl9QUk9WSURFUl9GQUNUT1JZKGRpc3BhdGNoZXI6IE92ZXJsYXlLZXlib2FyZERpc3BhdGNoZXIsIF9kb2N1bWVudDogYW55KTogT3ZlcmxheUtleWJvYXJkRGlzcGF0Y2hlcjtcbi8qKiBAZG9jcy1wcml2YXRlICovXG5leHBvcnQgZGVjbGFyZSBjb25zdCBPVkVSTEFZX0tFWUJPQVJEX0RJU1BBVENIRVJfUFJPVklERVI6IHtcbiAgICBwcm92aWRlOiB0eXBlb2YgT3ZlcmxheUtleWJvYXJkRGlzcGF0Y2hlcjtcbiAgICBkZXBzOiAoT3B0aW9uYWxbXSB8IEluamVjdGlvblRva2VuPGFueT4pW107XG4gICAgdXNlRmFjdG9yeTogKGRpc3BhdGNoZXI6IE92ZXJsYXlLZXlib2FyZERpc3BhdGNoZXIsIF9kb2N1bWVudDogYW55KSA9PiBPdmVybGF5S2V5Ym9hcmREaXNwYXRjaGVyO1xufTtcbiJdfQ==