{"version":3,"file":"collections.js","sources":["../../../src/cdk/collections/data-source.ts","../../../src/cdk/collections/selection.ts","../../../src/cdk/collections/unique-selection-dispatcher.ts","../../../src/cdk/collections/public-api.ts","../../../src/cdk/collections/index.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Observable} from 'rxjs/Observable';\nimport {CollectionViewer} from './collection-viewer';\n\nexport abstract class DataSource<T> {\n  /**\n   * Connects a collection viewer (such as a data-table) to this data source. Note that\n   * the stream provided will be accessed during change detection and should not directly change\n   * values that are bound in template views.\n   * @param collectionViewer The component that exposes a view over the data provided by this\n   *     data source.\n   * @returns Observable that emits a new value when the data changes.\n   */\n  abstract connect(collectionViewer: CollectionViewer): Observable<T[]>;\n\n  /**\n   * Disconnects a collection viewer (such as a data-table) from this data source. Can be used\n   * to perform any clean-up or tear-down operations when a view is being destroyed.\n   *\n   * @param collectionViewer The component that exposes a view over the data provided by this\n   *     data source.\n   */\n  abstract disconnect(collectionViewer: CollectionViewer): void;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Subject} from 'rxjs/Subject';\n\n/**\n * Class to be used to power selecting one or more options from a list.\n */\nexport class SelectionModel<T> {\n  /** Currently-selected values. */\n  private _selection: Set<T> = new Set();\n\n  /** Keeps track of the deselected options that haven't been emitted by the change event. */\n  private _deselectedToEmit: T[] = [];\n\n  /** Keeps track of the selected options that haven't been emitted by the change event. */\n  private _selectedToEmit: T[] = [];\n\n  /** Cache for the array value of the selected items. */\n  private _selected: T[] | null;\n\n  /** Selected values. */\n  get selected(): T[] {\n    if (!this._selected) {\n      this._selected = Array.from(this._selection.values());\n    }\n\n    return this._selected;\n  }\n\n  /** Event emitted when the value has changed. */\n  onChange: Subject<SelectionChange<T>> | null = this._emitChanges ? new Subject() : null;\n\n  constructor(\n    private _multiple = false,\n    initiallySelectedValues?: T[],\n    private _emitChanges = true) {\n\n    if (initiallySelectedValues && initiallySelectedValues.length) {\n      if (_multiple) {\n        initiallySelectedValues.forEach(value => this._markSelected(value));\n      } else {\n        this._markSelected(initiallySelectedValues[0]);\n      }\n\n      // Clear the array in order to avoid firing the change event for preselected values.\n      this._selectedToEmit.length = 0;\n    }\n  }\n\n  /**\n   * Selects a value or an array of values.\n   */\n  select(...values: T[]): void {\n    this._verifyValueAssignment(values);\n    values.forEach(value => this._markSelected(value));\n    this._emitChangeEvent();\n  }\n\n  /**\n   * Deselects a value or an array of values.\n   */\n  deselect(...values: T[]): void {\n    this._verifyValueAssignment(values);\n    values.forEach(value => this._unmarkSelected(value));\n    this._emitChangeEvent();\n  }\n\n  /**\n   * Toggles a value between selected and deselected.\n   */\n  toggle(value: T): void {\n    this.isSelected(value) ? this.deselect(value) : this.select(value);\n  }\n\n  /**\n   * Clears all of the selected values.\n   */\n  clear(): void {\n    this._unmarkAll();\n    this._emitChangeEvent();\n  }\n\n  /**\n   * Determines whether a value is selected.\n   */\n  isSelected(value: T): boolean {\n    return this._selection.has(value);\n  }\n\n  /**\n   * Determines whether the model does not have a value.\n   */\n  isEmpty(): boolean {\n    return this._selection.size === 0;\n  }\n\n  /**\n   * Determines whether the model has a value.\n   */\n  hasValue(): boolean {\n    return !this.isEmpty();\n  }\n\n  /**\n   * Sorts the selected values based on a predicate function.\n   */\n  sort(predicate?: (a: T, b: T) => number): void {\n    if (this._multiple && this._selected) {\n      this._selected.sort(predicate);\n    }\n  }\n\n  /** Emits a change event and clears the records of selected and deselected values. */\n  private _emitChangeEvent() {\n    // Clear the selected values so they can be re-cached.\n    this._selected = null;\n\n    if (this._selectedToEmit.length || this._deselectedToEmit.length) {\n      if (this.onChange) {\n        this.onChange.next({\n          source: this,\n          added: this._selectedToEmit,\n          removed: this._deselectedToEmit\n        });\n      }\n\n      this._deselectedToEmit = [];\n      this._selectedToEmit = [];\n    }\n  }\n\n  /** Selects a value. */\n  private _markSelected(value: T) {\n    if (!this.isSelected(value)) {\n      if (!this._multiple) {\n        this._unmarkAll();\n      }\n\n      this._selection.add(value);\n\n      if (this._emitChanges) {\n        this._selectedToEmit.push(value);\n      }\n    }\n  }\n\n  /** Deselects a value. */\n  private _unmarkSelected(value: T) {\n    if (this.isSelected(value)) {\n      this._selection.delete(value);\n\n      if (this._emitChanges) {\n        this._deselectedToEmit.push(value);\n      }\n    }\n  }\n\n  /** Clears out the selected values. */\n  private _unmarkAll() {\n    if (!this.isEmpty()) {\n      this._selection.forEach(value => this._unmarkSelected(value));\n    }\n  }\n\n  /**\n   * Verifies the value assignment and throws an error if the specified value array is\n   * including multiple values while the selection model is not supporting multiple values.\n   */\n  private _verifyValueAssignment(values: T[]) {\n    if (values.length > 1 && !this._multiple) {\n      throw getMultipleValuesInSingleSelectionError();\n    }\n  }\n}\n\n/**\n * Event emitted when the value of a MatSelectionModel has changed.\n * @docs-private\n */\nexport interface SelectionChange<T> {\n  /** Model that dispatched the event. */\n  source: SelectionModel<T>;\n  /** Options that were added to the model. */\n  added: T[];\n  /** Options that were removed from the model. */\n  removed: T[];\n}\n\n/**\n * Returns an error that reports that multiple values are passed into a selection model\n * with a single value.\n */\nexport function getMultipleValuesInSingleSelectionError() {\n  return Error('Cannot pass multiple values into SelectionModel with single-value mode.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, Optional, SkipSelf, OnDestroy} from '@angular/core';\n\n\n// Users of the Dispatcher never need to see this type, but TypeScript requires it to be exported.\nexport type UniqueSelectionDispatcherListener = (id: string, name: string) => void;\n\n/**\n * Class to coordinate unique selection based on name.\n * Intended to be consumed as an Angular service.\n * This service is needed because native radio change events are only fired on the item currently\n * being selected, and we still need to uncheck the previous selection.\n *\n * This service does not *store* any IDs and names because they may change at any time, so it is\n * less error-prone if they are simply passed through when the events occur.\n */\n@Injectable()\nexport class UniqueSelectionDispatcher implements OnDestroy {\n  private _listeners: UniqueSelectionDispatcherListener[] = [];\n\n  /**\n   * Notify other items that selection for the given name has been set.\n   * @param id ID of the item.\n   * @param name Name of the item.\n   */\n  notify(id: string, name: string) {\n    for (let listener of this._listeners) {\n      listener(id, name);\n    }\n  }\n\n  /**\n   * Listen for future changes to item selection.\n   * @return Function used to deregister listener\n   */\n  listen(listener: UniqueSelectionDispatcherListener): () => void {\n    this._listeners.push(listener);\n    return () => {\n      this._listeners = this._listeners.filter((registered: UniqueSelectionDispatcherListener) => {\n        return listener !== registered;\n      });\n    };\n  }\n\n  ngOnDestroy() {\n    this._listeners = [];\n  }\n}\n\n/** @docs-private */\nexport function UNIQUE_SELECTION_DISPATCHER_PROVIDER_FACTORY(\n    parentDispatcher: UniqueSelectionDispatcher) {\n  return parentDispatcher || new UniqueSelectionDispatcher();\n}\n\n/** @docs-private */\nexport const UNIQUE_SELECTION_DISPATCHER_PROVIDER = {\n  // If there is already a dispatcher available, use that. Otherwise, provide a new one.\n  provide: UniqueSelectionDispatcher,\n  deps: [[new Optional(), new SkipSelf(), UniqueSelectionDispatcher]],\n  useFactory: UNIQUE_SELECTION_DISPATCHER_PROVIDER_FACTORY\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport * from './collection-viewer';\nexport * from './data-source';\nexport * from './selection';\nexport {\n  UniqueSelectionDispatcher,\n  UniqueSelectionDispatcherListener,\n  UNIQUE_SELECTION_DISPATCHER_PROVIDER,\n} from './unique-selection-dispatcher';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n\nexport {UNIQUE_SELECTION_DISPATCHER_PROVIDER_FACTORY as ɵa} from './unique-selection-dispatcher';"]}