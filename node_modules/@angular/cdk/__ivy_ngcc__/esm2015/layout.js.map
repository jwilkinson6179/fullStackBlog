{"version":3,"file":"layout.js","sources":["../../../src/cdk/layout/media-matcher.ts","../../../src/cdk/layout/breakpoints-observer.ts","../../../src/cdk/layout/breakpoints.ts","../../../src/cdk/layout/public-api.ts","../../../src/cdk/layout/index.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Injectable} from '@angular/core';\nimport {Platform} from '@angular/cdk/platform';\n\n/**\n * Global registry for all dynamically-created, injected style tags.\n */\nconst styleElementForWebkitCompatibility: Map<string, HTMLStyleElement> = new Map();\n\n/** A utility for calling matchMedia queries. */\n@Injectable()\nexport class MediaMatcher {\n  /** The internal matchMedia method to return back a MediaQueryList like object. */\n  private _matchMedia: (query: string) => MediaQueryList;\n\n  constructor(private platform: Platform) {\n    this._matchMedia = this.platform.isBrowser && window.matchMedia ?\n      // matchMedia is bound to the window scope intentionally as it is an illegal invocation to\n      // call it from a different scope.\n      window.matchMedia.bind(window) :\n      noopMatchMedia;\n  }\n\n  /**\n   * Evaluates the given media query and returns the native MediaQueryList from which results\n   * can be retrieved.\n   * Confirms the layout engine will trigger for the selector query provided and returns the\n   * MediaQueryList for the query provided.\n   */\n  matchMedia(query: string): MediaQueryList {\n    if (this.platform.WEBKIT) {\n      createEmptyStyleRule(query);\n    }\n    return this._matchMedia(query);\n  }\n}\n\n/**\n * For Webkit engines that only trigger the MediaQueryListListener when there is at least one CSS\n * selector for the respective media query.\n */\nfunction createEmptyStyleRule(query: string) {\n  if (!styleElementForWebkitCompatibility.has(query)) {\n    try {\n      const style = document.createElement('style');\n\n      style.setAttribute('type', 'text/css');\n      if (!style.sheet) {\n        const cssText = `@media ${query} {.fx-query-test{ }}`;\n        style.appendChild(document.createTextNode(cssText));\n      }\n\n      document.getElementsByTagName('head')[0].appendChild(style);\n\n      // Store in private global registry\n      styleElementForWebkitCompatibility.set(query, style);\n    } catch (e) {\n      console.error(e);\n    }\n  }\n}\n\n/** No-op matchMedia replacement for non-browser platforms. */\nfunction noopMatchMedia(query: string): MediaQueryList {\n  return {\n    matches: query === 'all' || query === '',\n    media: query,\n    addListener: () => {},\n    removeListener: () => {}\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Injectable, NgZone, OnDestroy} from '@angular/core';\nimport {MediaMatcher} from './media-matcher';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\nimport {map} from 'rxjs/operators/map';\nimport {startWith} from 'rxjs/operators/startWith';\nimport {takeUntil} from 'rxjs/operators/takeUntil';\nimport {coerceArray} from '@angular/cdk/coercion';\nimport {combineLatest} from 'rxjs/observable/combineLatest';\nimport {fromEventPattern} from 'rxjs/observable/fromEventPattern';\n\n/** The current state of a layout breakpoint. */\nexport interface BreakpointState {\n  /** Whether the breakpoint is currently matching. */\n  matches: boolean;\n}\n\ninterface Query {\n  observable: Observable<BreakpointState>;\n  mql: MediaQueryList;\n}\n\n/** Utility for checking the matching state of @media queries. */\n@Injectable()\nexport class BreakpointObserver implements OnDestroy {\n  /**  A map of all media queries currently being listened for. */\n  private _queries: Map<string, Query> = new Map();\n  /** A subject for all other observables to takeUntil based on. */\n  private _destroySubject: Subject<{}> = new Subject();\n\n  constructor(private mediaMatcher: MediaMatcher, private zone: NgZone) {}\n\n  /** Completes the active subject, signalling to all other observables to complete. */\n  ngOnDestroy() {\n    this._destroySubject.next();\n    this._destroySubject.complete();\n  }\n\n  /**\n   * Whether one or more media queries match the current viewport size.\n   * @param value One or more media queries to check.\n   * @returns Whether any of the media queries match.\n   */\n  isMatched(value: string | string[]): boolean {\n    let queries = coerceArray(value);\n    return queries.some(mediaQuery => this._registerQuery(mediaQuery).mql.matches);\n  }\n\n  /**\n   * Gets an observable of results for the given queries that will emit new results for any changes\n   * in matching of the given queries.\n   * @returns A stream of matches for the given queries.\n   */\n  observe(value: string | string[]): Observable<BreakpointState> {\n    let queries = coerceArray(value);\n    let observables = queries.map(query => this._registerQuery(query).observable);\n\n    return combineLatest(observables, (a: BreakpointState, b: BreakpointState) => {\n      return {\n        matches: !!((a && a.matches) || (b && b.matches)),\n      };\n    });\n  }\n\n  /** Registers a specific query to be listened for. */\n  private _registerQuery(query: string): Query {\n    // Only set up a new MediaQueryList if it is not already being listened for.\n    if (this._queries.has(query)) {\n      return this._queries.get(query)!;\n    }\n\n    let mql: MediaQueryList = this.mediaMatcher.matchMedia(query);\n    // Create callback for match changes and add it is as a listener.\n    let queryObservable = fromEventPattern(\n      // Listener callback methods are wrapped to be placed back in ngZone. Callbacks must be placed\n      // back into the zone because matchMedia is only included in Zone.js by loading the\n      // webapis-media-query.js file alongside the zone.js file.  Additionally, some browsers do not\n      // have MediaQueryList inherit from EventTarget, which causes inconsistencies in how Zone.js\n      // patches it.\n      (listener: MediaQueryListListener) => {\n        mql.addListener((e: MediaQueryList) => this.zone.run(() => listener(e)));\n      },\n      (listener: MediaQueryListListener) => {\n        mql.removeListener((e: MediaQueryList) => this.zone.run(() => listener(e)));\n      })\n      .pipe(\n        takeUntil(this._destroySubject),\n        startWith(mql),\n        map((nextMql: MediaQueryList) => ({matches: nextMql.matches}))\n      );\n\n    // Add the MediaQueryList to the set of queries.\n    let output = {observable: queryObservable, mql: mql};\n    this._queries.set(query, output);\n    return output;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// PascalCase is being used as Breakpoints is used like an enum.\n// tslint:disable-next-line:variable-name\nexport const Breakpoints = {\n  XSmall: '(max-width: 599px)',\n  Small: '(min-width: 600px) and (max-width: 959px)',\n  Medium: '(min-width: 960px) and (max-width: 1279px)',\n  Large: '(min-width: 1280px) and (max-width: 1919px)',\n  XLarge: '(min-width: 1920px)',\n\n  Handset: '(max-width: 599px) and (orientation: portrait), ' +\n           '(max-width: 959px) and (orientation: landscape)',\n  Tablet: '(min-width: 600px) and (max-width: 839px) and (orientation: portrait), ' +\n          '(min-width: 960px) and (max-width: 1279px) and (orientation: landscape)',\n  Web: '(min-width: 840px) and (orientation: portrait), ' +\n       '(min-width: 1280px) and (orientation: landscape)',\n\n  HandsetPortrait: '(max-width: 599px) and (orientation: portrait)',\n  TabletPortrait: '(min-width: 600px) and (max-width: 839px) and (orientation: portrait)',\n  WebPortrait: '(min-width: 840px) and (orientation: portrait)',\n\n  HandsetLandscape: '(max-width: 959px) and (orientation: landscape)',\n  TabletLandscape: '(min-width: 960px) and (max-width: 1279px) and (orientation: landscape)',\n  WebLandscape: '(min-width: 1280px) and (orientation: landscape)',\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {NgModule} from '@angular/core';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {BreakpointObserver} from './breakpoints-observer';\nimport {MediaMatcher} from './media-matcher';\n\n@NgModule({\n  providers: [BreakpointObserver, MediaMatcher],\n  imports: [PlatformModule],\n})\nexport class LayoutModule {}\n\nexport {BreakpointObserver, BreakpointState} from './breakpoints-observer';\nexport {Breakpoints} from './breakpoints';\nexport {MediaMatcher} from './media-matcher';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"]}